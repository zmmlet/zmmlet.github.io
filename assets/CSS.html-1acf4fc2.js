import{_ as l}from"./标准盒子模型-f0416997.js";import{_ as c,Q as d,S as u,U as n,a4 as a,a6 as s,a8 as p,a7 as e,E as o}from"./framework-ca2498c6.js";const r={},k=e('<h1 id="css" tabindex="-1"><a class="header-anchor" href="#css" aria-hidden="true">#</a> CSS</h1><h2 id="_1-盒模型组成是什么-box-sizing-有什么作用" tabindex="-1"><a class="header-anchor" href="#_1-盒模型组成是什么-box-sizing-有什么作用" aria-hidden="true">#</a> 1. 盒模型组成是什么？，box-sizing 有什么作用</h2><p>下图为标准盒子（W3C 标准） <img src="'+l+'" alt="" loading="lazy"></p><ol><li><p>盒模型：margin(外边距) padding(内边距) border(边框) content(内容)</p></li><li><p>box-sizing:content-box / border-box / inherit 有以下三个属性</p><ul><li>content-box:指定元素的宽度和高度（最小/最大属性）适用于 box 的宽度和高度，元素的填充和边框布局和绘制指定宽度和高度除外.</li><li>border-box:指定宽度和高度（最小/最大属性）确定元素边框 box，对元素指定宽度和高度包括 padding 和 border 的指定，内容的宽度和高度减去各自双方该边框和填充的宽度从指定的“宽度”和“高度”属性计算</li><li>inherit:指定 box-sizing 属性的值，应该从父元素继承</li></ul></li></ol><h2 id="_2-css3-新特性有哪些-伪类-伪元素-锚伪类分别有哪些" tabindex="-1"><a class="header-anchor" href="#_2-css3-新特性有哪些-伪类-伪元素-锚伪类分别有哪些" aria-hidden="true">#</a> 2. CSS3 新特性有哪些，伪类，伪元素，锚伪类分别有哪些</h2>',5),h={class:"hint-container tip"},v=n("p",{class:"hint-container-title"},"提示",-1),g=e(`<h3 id="css3-新特性" tabindex="-1"><a class="header-anchor" href="#css3-新特性" aria-hidden="true">#</a> CSS3 新特性</h3><ol><li>CSS 实现圆角（border-radius）,阴影（box-shadow）,边框图片 border-image</li><li>对文字加特效（text-shadow）,强制文本换行（word-wrap）,线性渐变（linear-gradient）</li><li>旋转，缩放，定位，倾斜： transform:rotate(90deg) scale(0.85,0.90) translate(0px,-30px) skew(-9deg,0deg)</li><li>增加了更多的 CSS 选择器，多背景，rgba();</li><li>在 CSS3 中唯一引入的伪元素是::selection;</li><li>媒体查询（@media）,多栏布局（flex）</li></ol><h3 id="伪类" tabindex="-1"><a class="header-anchor" href="#伪类" aria-hidden="true">#</a> 伪类</h3><p>用于向某些选择器添加特殊的效果</p><ol><li><code>:hover</code> 将样式添加到鼠标悬浮的元素</li><li><code>:active</code> 将样式添加到被激活的元素</li><li><code>:focus</code> 将样式添加到获得焦点的元素</li><li><code>:link</code> 将样式添加到未被访问过的链接</li><li><code>:visited</code> 将样式添加到被访问过的链接</li><li><code>:first-child</code> 将样式添加到元素的第一个子元素</li><li><code>:lang</code> 定义指定的元素中使用的语言</li></ol><h3 id="伪元素" tabindex="-1"><a class="header-anchor" href="#伪元素" aria-hidden="true">#</a> 伪元素</h3><p>用于将特殊的效果添加到某些选择器，伪元素代表了某个元素的子元素，这个子元素虽然在逻辑上存在，但却并不实际存在于文档树中</p><ol><li><code>::first-letter</code> 将样式添加到文本的首字母</li><li><code>::first-line</code> 将样式添加到文本的首行</li><li><code>::before</code> 在某元素之前插入某些内容</li><li><code>::after</code> 在某元素之后插入某些内容</li></ol><h3 id="新增伪类" tabindex="-1"><a class="header-anchor" href="#新增伪类" aria-hidden="true">#</a> 新增伪类</h3><ol><li><code>p:first-of-type</code>选择属于其父元素的首个<code>&lt;p&gt;</code>元素的每个<code>&lt;p&gt;</code>元素</li><li><code>p:last-of-type</code>选择属于其父元素的最后<code>&lt;p&gt;</code>元素的每个<code>&lt;p&gt;</code>元素</li><li><code>p:only-of-type</code> 选择属于其父元素唯一的<code>&lt;p&gt;</code>元素的每个<code>&lt;p&gt;</code>元素</li><li><code>p:only-child</code>选择属于其父元素唯一的子元素的每个<code>&lt;p&gt;</code>元素</li><li><code>p:nth-child(n)</code>选择属于其父元素的第 n 个子元素的每个<code>&lt;p&gt;</code>元素</li><li><code>p:nth-last-child(n)</code>选择属于其父元素的倒数第 n 个子元素的每个<code>&lt;p&gt;</code>元素</li><li><code>p:nth-of-type(n)</code>选择属于其父元素第 n 个<code>&lt;p&gt;</code>元素的每个<code>&lt;p&gt;</code>元素</li><li><code>p:nth-last-of-type(n)</code>选择属于其父元素倒数第 n 个<code>&lt;p&gt;</code>元素的每个<code>&lt;p&gt;</code>元素</li><li><code>p:last-child</code>选择属于其父元素最后一个子元素的每个<code>&lt;p&gt;</code>元素</li><li><code>p:empty</code> 选择没有子元素的每个<code>&lt;p&gt;</code>元素(包括文本节点)</li><li><code>p:target</code> 选择当前活动的<code>&lt;p&gt;</code>元素</li><li><code>:not(p)</code> 选择非<code>&lt;p&gt;</code>元素的每个元素</li><li><code>:enabled</code> 控制表单控件的可用状态</li><li><code>:disabled</code> 控制表单控件的禁用状态</li></ol><h2 id="_3-css-实现隐藏元素的方式有几种" tabindex="-1"><a class="header-anchor" href="#_3-css-实现隐藏元素的方式有几种" aria-hidden="true">#</a> 3. CSS 实现隐藏元素的方式有几种</h2><ol><li><code>opacity</code>设置一个元素的透明度 <code>.hide{opacity:0;}</code></li><li><code>visibility</code> <code>.hide{visibility:hidden}</code></li><li><code>display</code>确保元素不可见并且连盒模型也不生成 <code>.hide{display:none}</code></li><li><code>position</code> <code>.hide{position:absolute; top:-9999px; left:-9999px;}</code></li><li><code>clip-path</code> <code>.hide{clip-path:polygon(0px 0px, 0px 0px, 0px 0px, 0px 0px};</code></li></ol><h2 id="_4-如何实现盒子在页面水平和垂直居中" tabindex="-1"><a class="header-anchor" href="#_4-如何实现盒子在页面水平和垂直居中" aria-hidden="true">#</a> 4. 如何实现盒子在页面水平和垂直居中</h2><h3 id="水平居中设置" tabindex="-1"><a class="header-anchor" href="#水平居中设置" aria-hidden="true">#</a> 水平居中设置</h3><ol><li>行内元素：设置<code>text-align:center</code>;</li><li>定宽块状元素：设置 左右 <code>margin</code>值为<code>auto</code>;</li><li>不定宽块状元素</li><li>在元素外加入 <code>table</code>标签(完整的，包括<code>table</code>,<code>tbody</code>,<code>tr</code>,<code>td</code>),该元素写在<code>td</code>内，然后设置<code>margin</code>的值为<code>auto</code>;</li><li>给该元素设置<code>display:inline</code>方法；</li><li>父元素设置<code>position:relative</code>和<code>left:50%</code>,子元素设置<code>position:relative</code>和<code>left:50%</code></li></ol><h3 id="垂直居中设置" tabindex="-1"><a class="header-anchor" href="#垂直居中设置" aria-hidden="true">#</a> 垂直居中设置</h3><ol><li>父元素高度确定的单行文本，设置<code>height=line-height;</code></li><li>父元素高度确定的多行文本 <ul><li>插入 table（插入方法和水平居中一样）,然后设置<code>vertical-align:middle;</code></li><li>先设置<code>display:table-cell</code> 再设置 <code>vertical-align:middle;</code></li></ul></li></ol><h2 id="_5-详细的描述一下-position-display" tabindex="-1"><a class="header-anchor" href="#_5-详细的描述一下-position-display" aria-hidden="true">#</a> 5. 详细的描述一下 position , display</h2><h3 id="position" tabindex="-1"><a class="header-anchor" href="#position" aria-hidden="true">#</a> position</h3><ol><li><code>position：absolute;</code> 绝对定位的元素，相对于 static 定位以外的第一个父元素进行定位</li><li><code>position:fixed;</code> 生成绝对定位的元素，相对于浏览器窗口进行定位.</li><li><code>position:relative;</code> 生成相对定位的元素，相对于其正常位置进行定位</li><li><code>position:static;</code> 默认值，没有定位，元素在正常的文档流(忽略 top,bottom,left,right 或者 z-index 声明)</li><li><code>position:inherit;</code> 规定应该从父元素继承 position 属性的值</li></ol><h3 id="display-常用" tabindex="-1"><a class="header-anchor" href="#display-常用" aria-hidden="true">#</a> display（常用）</h3><ol><li><code>display:none</code> 此元素不会被显示</li><li><code>display:block;</code> 此元素将显示为块级元素，此元素前后会带有换行符</li><li><code>display:inline;</code> 行内块元素</li><li><code>display:inline-block;</code> 此元素会作为列表显示</li></ol><h2 id="_6-请解释-box-sizing-border-box-的作用-并说明使用它的好处" tabindex="-1"><a class="header-anchor" href="#_6-请解释-box-sizing-border-box-的作用-并说明使用它的好处" aria-hidden="true">#</a> 6.请解释 <code>{box-sizing:border-box;}</code> 的作用，并说明使用它的好处</h2><p>它是 CSS3 新增的属性：</p><ul><li>通常一个块级元素实际所占的宽高度=margin+(border-width)+padding+height/width;</li><li>如果设置了 <code>border-box</code>，实际所占的宽高度=设置的高度/设置的宽度+margin 无论如何改动 border 和 padding 的值，都不会导致 box 总尺寸发生变化，也就不会打乱页面整体布局</li></ul><h2 id="_7-浮动元素引起的问题和解决办法" tabindex="-1"><a class="header-anchor" href="#_7-浮动元素引起的问题和解决办法" aria-hidden="true">#</a> 7. 浮动元素引起的问题和解决办法</h2><h3 id="浮动会引起问题" tabindex="-1"><a class="header-anchor" href="#浮动会引起问题" aria-hidden="true">#</a> 浮动会引起问题</h3><ol><li>由于浮动元素已脱离文档流，所以父元素无法被撑开，影响与父级元素同级的元素</li><li>与浮动元素同级的非浮动元素（内联元素）会跟随其后，也是由于浮动元素脱离文档流，不占据文档流中的位置</li><li>如果该浮动元素不是同级第一个浮动的元素，则他之前的浮动也应该浮动，否则容易影响页面的结构显示</li></ol><h3 id="清除浮动常用方法" tabindex="-1"><a class="header-anchor" href="#清除浮动常用方法" aria-hidden="true">#</a> 清除浮动常用方法</h3><ol><li>额外标签法，又称 “隔墙法”</li><li>使用伪类 <code>arter</code> 等等，其实是隔墙法的变异操作</li><li>浮动外部元素</li><li>设置高度或者使用 <code>overflow:hidden</code> 或者 <code>auto</code></li></ol><h2 id="_8-link-和-import-引入-css-的区别" tabindex="-1"><a class="header-anchor" href="#_8-link-和-import-引入-css-的区别" aria-hidden="true">#</a> 8. Link 和 @import 引入 CSS 的区别</h2><ol><li><strong>适用范围不同</strong>：@import 可以在网页页面中使用，也可以在 css 文件中使用，用来将多个 CSS 文件引入到一个 CSS 文件中；而 link 只能将 CSS 文件引入到网页页面中。</li><li><strong>功能范围不同</strong>：link 属于 XHTML 标签，而@import 是 CSS 提供的一种方式，link 标签除了可以加载 CSS 外，还可以定义 RSS,定义 rel 连接属性等，@import 就只能加载 CSS</li><li><strong>加载顺序不同</strong>：当一个页面被加载的时候，Link 引用的 CSS 会同时被加载，而@import 引用的 CSS 会等到页面全部被下载完再被加载，所以有时候浏览@import 加载 CSS 的页面时开始会没有样式（就是闪烁），这种是在网速慢的时候才会看得出来</li><li><strong>兼容性差别</strong>：由于@import 是 CSS2.1 提出的，所以老的浏览器不支持，而@import 只有在 IE5 以上的才能识别，而 link 标签无此问题</li><li><strong>控制样式时差别</strong>： 使用 Link 方式可以让用户切换 CSS 样式</li></ol><h2 id="_9-解释一下-css3-的-flexbox-以及适用场景" tabindex="-1"><a class="header-anchor" href="#_9-解释一下-css3-的-flexbox-以及适用场景" aria-hidden="true">#</a> 9. 解释一下 css3 的 flexbox，以及适用场景</h2><p>弹性布局的主要思想是让容器有能力来改变项目的宽度和高度，以填满可用空间（主要是为了容纳所有类型的显示设备和屏幕尺寸）的能力，flexbox 布局是最合适的一个应用程序的组件，以及小规模的布局，而网络布局是用于较大规模的布局</p><h2 id="_10-inline-和-inline-block-的区别" tabindex="-1"><a class="header-anchor" href="#_10-inline-和-inline-block-的区别" aria-hidden="true">#</a> 10. inline 和 inline-block 的区别</h2><ol><li>inline 元素不会独占一行，多个相邻的行内元素会排列在同一行里，直到一行排列不下，才会新换一行，其宽度随元素的内容而变化</li><li>Inline 元素设置 width,height 属性无效</li><li>inline 元素的 margin 和 padding 属性，水平方向的 padding-left,padding-right,margin-left,margin-right 都产生边距效果；但竖直方向的 padding-top,padding-bottom,magin-top,margin-bottom 不会产生边距效果。</li></ol><h2 id="_11-网格布局了解吗-grid" tabindex="-1"><a class="header-anchor" href="#_11-网格布局了解吗-grid" aria-hidden="true">#</a> 11. 网格布局了解吗 （ grid ）</h2><p>Grid 布局又称“网格”，是一个基于二维网格布局的系统，主要目的是改变我们基于网格设计的用户接口方式，Grid 布局是第一个专门为解决布局问题而创建的 CSS 模块</p><h2 id="_12-传统表格布局了解吗-table" tabindex="-1"><a class="header-anchor" href="#_12-传统表格布局了解吗-table" aria-hidden="true">#</a> 12.传统表格布局了解吗（ table ）</h2><p>Table 用于布局，主要用来显示批量的数据；但是 table 有一个缺点，就是加载页面的时候，需要将全部的数据都请求到，才显示页面，否则就是一片的空白，所以现在一般都不用 table 进行布局.但因其稳定性非常优秀，一般在管理系统类项目中应用较多。</p><h2 id="_13-实现两栏布局你知道有哪些方法" tabindex="-1"><a class="header-anchor" href="#_13-实现两栏布局你知道有哪些方法" aria-hidden="true">#</a> 13. 实现两栏布局你知道有哪些方法</h2><ol><li>margin-bottom 和 padding-bottom</li><li>table-row 和 table-cell</li><li>flex 布局</li></ol><h2 id="_14-流式布局如何实现-响应式布局如何实现" tabindex="-1"><a class="header-anchor" href="#_14-流式布局如何实现-响应式布局如何实现" aria-hidden="true">#</a> 14. 流式布局如何实现，响应式布局如何实现</h2><table><thead><tr><th>流式布局</th><th>响应式布局</th></tr></thead><tbody><tr><td>也叫 fluid,当上面一行的空间不够容纳新的 TextView 时候才开辟下一行的空间，场景：主要用于关键词搜索或者热门标签等场景；他主要是按照页面元素的宽度按照屏幕分辨率进行适配调整，但整体布局不变,使用%百分比定义宽度，高度大都是用 px 来固定，可以根据可视区域和父元素的实时尺寸来调整，尽可能适应各种分辨率</td><td>主要是实现不同屏幕分辨率的终端上浏览网页的不同展示方式，通过响应式设计能使网站在手机和平板电脑上有更好的浏览阅读体验；首先设置 meta 标签，通过媒体查询来设置样式 Media Queries,然后再设置多种试图宽度</td></tr></tbody></table><h2 id="_15-三栏布局-圣杯布局-双飞翼-flex-布局" tabindex="-1"><a class="header-anchor" href="#_15-三栏布局-圣杯布局-双飞翼-flex-布局" aria-hidden="true">#</a> 15. 三栏布局 （圣杯布局 / 双飞翼 / Flex 布局）</h2><h3 id="圣杯布局" tabindex="-1"><a class="header-anchor" href="#圣杯布局" aria-hidden="true">#</a> 圣杯布局</h3><p>圣杯布局是指两边盒子宽度固定，中间盒子自适应的三栏布局，其中，中间栏放到文档流前面，保证先行渲染；三栏全部使用“float:left”浮动，并配合 left 和 right 属性</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>header<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>container<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>left<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>center<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>right<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>footer<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.header</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 64px<span class="token punctuation">;</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> lightcyan<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.container</span> <span class="token punctuation">{</span>
  <span class="token comment">/* 溢出隐藏 */</span>
  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
  <span class="token comment">/*  外层的container设置 padding-left: 400px;padding-right: 140px;，
      目的是：
      给left和right ，给这两个盒子，腾出显示的位置（或者说空出位置）。
  */</span>
  <span class="token property">padding-left</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>
  <span class="token property">padding-right</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.container .left,
.container .center,
.container .right</span> <span class="token punctuation">{</span>
  <span class="token comment">/* 都三个盒子 都设置 高度是900像素 */</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span>
  <span class="token comment">/* 都三个盒子 都设置 左浮动 */</span>
  <span class="token comment">/* 浮动 */</span>
  <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.container .left</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> lightseagreen<span class="token punctuation">;</span>
  <span class="token comment">/* 向左移动了400px */</span>
  <span class="token property">margin-left</span><span class="token punctuation">:</span> -500px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.container .center</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> lightgreen<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.container .right</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> lightpink<span class="token punctuation">;</span>
  <span class="token property">margin-right</span><span class="token punctuation">:</span> -150px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.footer</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 46px<span class="token punctuation">;</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> lightsalmon<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="双飞翼" tabindex="-1"><a class="header-anchor" href="#双飞翼" aria-hidden="true">#</a> 双飞翼</h3><p>圣杯布局和双飞翼布局解决的问题是相同的，就是两边顶宽，中间自适应的三栏布局，中间栏要在放在文档流前面以优先渲染</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>作用：双飞翼布局为了让中间 div 内容不被遮挡，直接在中间 div 内部创建子 div 用于放置内容，在该 div 里用 margin-left 和 margin-right 为左右两栏 div 留出位置</p></div><p><strong>优点：</strong> 不会像圣杯布局那样变形</p><p><strong>缺点：</strong> 多了一层 dom 节点</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>header<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>头部<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>container<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>content<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>center<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>中间<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>left<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>左边<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>right<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>右边<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>footer<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>尾部<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.header,
.footer</span> <span class="token punctuation">{</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 64px<span class="token punctuation">;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> lightpink<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.content,
.left,
.right</span> <span class="token punctuation">{</span>
  <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.content</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> lightcyan<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.left</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> lightgreen<span class="token punctuation">;</span>
  <span class="token property">margin-left</span><span class="token punctuation">:</span> -100%<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.right</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> lightseagreen<span class="token punctuation">;</span>
  <span class="token property">margin-left</span><span class="token punctuation">:</span> -300px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.center</span> <span class="token punctuation">{</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
  <span class="token property">margin-left</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>
  <span class="token property">margin-right</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.container::after</span> <span class="token punctuation">{</span>
  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>
  <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="flex-布局" tabindex="-1"><a class="header-anchor" href="#flex-布局" aria-hidden="true">#</a> Flex 布局</h3><p>Flex 是 Flexible Box 的缩写 flex 布局表示弹性布局，可以为盒状模型提供最大的灵活性</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>header<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>头部<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>container<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>left<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>左边<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>center<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>中间<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>right<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>右边<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>footer<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>尾部<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.header,
.footer</span> <span class="token punctuation">{</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 64px<span class="token punctuation">;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> lightpink<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.content,
.left,
.right</span> <span class="token punctuation">{</span>
  <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.container</span> <span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.center</span> <span class="token punctuation">{</span>
  <span class="token property">flex</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> lightcoral<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.left</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> lightgreen<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.right</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> lightseagreen<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_16-less-sass-的区别" tabindex="-1"><a class="header-anchor" href="#_16-less-sass-的区别" aria-hidden="true">#</a> 16. Less / sass 的区别</h2>`,61),m={class:"hint-container tip"},b=n("p",{class:"hint-container-title"},"提示",-1),x=n("li",null,"less 和 sass 语法相似",-1),f=n("li",null,"sass 和 scss 区别：2.1 sass 是以“.sass”后缀为扩展名，而 SCSS 是以“.scss”后缀为扩展名。2.2 sass 是以严格的缩进式语法规则来书写，不带大括号“{}”和分号“;”，而 SCSS 的语法书写和 CSS 语法书写方式非常类似，带大括号分号。",-1),_={href:"http://lesscss.cn/",target:"_blank",rel:"noopener noreferrer"},y={href:"https://www.sass.hk/",target:"_blank",rel:"noopener noreferrer"},S=n("tbody",null,[n("tr",null,[n("td",null,"是一门 css 预处理语言，他扩充了 css 语言，增加了诸如变量，混合(mixin),函数等功能，让 css 更易维护，方便制作主题，扩充，less 可以运行在 Node 或浏览器端"),n("td",null,"是一种 css 的开发工具，提供了许多便利的写法，大大节省了设计者的时间，使得 css 的开发，变得简单和可维护")])],-1),q=n("h2",{id:"_17-什么是-bfc-如何去创建-bfc-它能解决什么问题",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_17-什么是-bfc-如何去创建-bfc-它能解决什么问题","aria-hidden":"true"},"#"),a(" 17. 什么是 BFC,如何去创建 BFC ? 它能解决什么问题")],-1),C=n("p",null,[n("strong",null,"BFC：简单说，它是一种属性，这种属性会影响着元素的定位以及与其兄弟元素之间的相互作用")],-1),w=n("p",null,"如何创建 BFC：当一个 HTML 元素满足下面条件的任何一点，都可以产生 BFC,常见的，float 的值不为‘none’，overflow 的值不为‘visible’,display 的值为‘table-cell’,‘table-caption’,or‘inline-block’中的任何一个，position 的值不为‘static’或‘relative’中的任何一个创建一个 BFC 的元素就是一个独立的盒子，里面的子元素不会在布局上影响外面的元素，反之亦然，同时 BFC 仍然属于文档中的普通流",-1),E={href:"https://blog.csdn.net/qq_48739475/article/details/121655856",target:"_blank",rel:"noopener noreferrer"},B=e('<h2 id="_18-css-中的长度单位有哪些" tabindex="-1"><a class="header-anchor" href="#_18-css-中的长度单位有哪些" aria-hidden="true">#</a> 18. CSS 中的长度单位有哪些</h2><p>CSS 长度单位有 px,pt,rem,em,ex,vw,vh,vmin,vmax， 其中常用单位有 px, rem, em</p><h3 id="绝对长度单位" tabindex="-1"><a class="header-anchor" href="#绝对长度单位" aria-hidden="true">#</a> 绝对长度单位</h3><ol><li>PX 实际上是一个按角度度量的单位，是一个像素单位</li><li>IN 英寸是一个物理度量单位 1in==96px</li><li>Cm 厘米是比较熟悉有用的物理度量单位，他也映射成像素 1cm==37.8px</li><li>Mm 毫米是个小数量级的物理度量单位 1mm<mark>0.1cm</mark>3.78px</li></ol><h3 id="相对字体的长度" tabindex="-1"><a class="header-anchor" href="#相对字体的长度" aria-hidden="true">#</a> 相对字体的长度</h3><ol><li>Em 是一个相对单位 1em<mark>16px</mark>0.17in<mark>12pt</mark>1pc<mark>4.2mm</mark>0.42cm</li><li>Rem rem 和 em 一样也是一个相对单位，但是和 em 不同的是 rem 总是相对于根元素，而不像 em 一样使用级联的方式来计算尺寸</li><li>Point 它是一个物理度量单位 1pt=1/72in</li><li>Pica pica 和 points 一样，只不过 1pc=12pt</li><li>Ex ex 是一个基于当前字体的 x 字母高度度量的</li><li>Ch ch 的内涵和 x 高度相似，只是 ch 是基于字符 0 的宽度的而不是基于字符 x 高度的</li></ol><h3 id="可视区百分比长度单位" tabindex="-1"><a class="header-anchor" href="#可视区百分比长度单位" aria-hidden="true">#</a> 可视区百分比长度单位</h3><ol><li>Vw 是可视区宽度单位，1vw 等于可视区宽度的百分之一，vw 单位跟百分比很相似</li></ol><h2 id="_19-css-中选择器的优先级关系" tabindex="-1"><a class="header-anchor" href="#_19-css-中选择器的优先级关系" aria-hidden="true">#</a> 19. CSS 中选择器的优先级关系</h2><p>!important&gt;行内样式&gt;ID 选择器&gt;类选择器&gt;标签&gt;通配符&gt;继承&gt;浏览器默认属性</p><h2 id="_20-什么是-svg-它能做什么" tabindex="-1"><a class="header-anchor" href="#_20-什么是-svg-它能做什么" aria-hidden="true">#</a> 20.什么是 SVG,它能做什么</h2><p>SVG 它是可伸缩矢量图形，用来定义用于网络的基于矢量的图形，图形在放大或者改变尺寸的情况，其图形质量不会有所损失。矢量图和位图的区别也就在于矢量图无限放大不影响图片质量。</p><h2 id="_21-css-的加载时异步的吗-它表现在什么地方" tabindex="-1"><a class="header-anchor" href="#_21-css-的加载时异步的吗-它表现在什么地方" aria-hidden="true">#</a> 21.CSS 的加载时异步的吗？它表现在什么地方</h2><ol><li>触发异步样式下载的诀窍是使用一个 <code>&lt;link&gt;</code> 元素，并为<code>media</code> 属性设置一个不可用的值 (我用的是 <code>media=&quot;none&quot;</code>, 不过其它的任何值也是可以的)。当一个媒体查询的结果值计算出来是 <code>false</code> 的时候，浏览器仍然会下载样式表，但是不会在渲染页面之前等待样式表的资源可用</li><li>延迟添加<code>link</code>标签到页面，这种方式比较兼容可以使用同样原理，延迟加载 JS</li></ol><h2 id="_22-工作中遇到的浏览器兼容问题有哪些-你都知道哪些常用的-hack-技巧" tabindex="-1"><a class="header-anchor" href="#_22-工作中遇到的浏览器兼容问题有哪些-你都知道哪些常用的-hack-技巧" aria-hidden="true">#</a> 22. 工作中遇到的浏览器兼容问题有哪些？你都知道哪些常用的 HACK 技巧</h2>',15),F={class:"hint-container tip"},z=n("p",{class:"hint-container-title"},"提示",-1),I={href:"https://baike.baidu.com/item/css%20hack/7026361?fr=aladdin",target:"_blank",rel:"noopener noreferrer"},L=e('<h3 id="浏览器兼容问题" tabindex="-1"><a class="header-anchor" href="#浏览器兼容问题" aria-hidden="true">#</a> 浏览器兼容问题</h3><ol><li><p>不同浏览器的默认初始值不同。</p><ul><li>解决方法：引入全局控制样式，或者使用第三方</li></ul></li><li><p>块属性标签 <code>float</code> 后，又有横行的 <code>margin</code> 的情况下，在 <code>IE6</code> 显示 <code>margin</code> 比设置的大。</p><ul><li>解决方法：在 <code>float</code> 的标签样式控制中加入 <code>display:inline</code>,将其转化为行内属性。</li></ul></li><li><p>设置小于 <code>10px</code> 高度标签，在 <code>IE6,7</code>,无法正常显示设置高度。</p><ul><li>解决方法：给超出高度的标签设置 <code>overflow:hidden;</code>或者设置行高 <code>line-height</code> 小于你设置的高度</li></ul></li><li><p>行内属性标签，设置 <code>display:block</code> 后采用 <code>float</code> 布局，又有横行的 <code>margin</code> 的情况，<code>IE6</code> 间距 bug</p><ul><li>解决方法：在 <code>display:block;</code>后面加入 <code>display:inline;display:table;</code></li></ul></li><li><p>图片默认有间距。</p><ul><li>解决方法：使用 <code>float</code> 属性为 <code>img</code> 布局。</li></ul></li><li><p>标签最低高度设置 <code>min-height</code> 不兼容。</p><ul><li>解决方法：如果我们要设置一个标签的最小高度 200px，需要进行的设置为：<code>{min-height:200px; height:auto !important; height:200px; overflow:visible;}</code></li></ul></li></ol><h3 id="常用的-hack-技巧" tabindex="-1"><a class="header-anchor" href="#常用的-hack-技巧" aria-hidden="true">#</a> 常用的 HACK 技巧</h3><ol><li>Ie 浏览器 hack 如下 <ul><li><code>_nowamagic:1px;-----------ie6 </code></li><li><code>*nowamagic:1px;-----------ie7 </code></li><li><code>nowamagic:1px\\0;----------ie89 </code></li><li><code>nowamagic:1px\\9\\0;--------ie9 </code></li><li><code>:root nowamagic:1px; ----ie9</code></li></ul></li><li>Firefox 与 Chrome 的 Hack <ul><li><code>Firefox:@-moz-document url-prefix() /*写在选择器外层时（只可写在此处）：Firefox only*/</code></li><li><code>Chrome:@media screen and (-webkit-min-device-pixel-ratio:0) /*写在选择器外层时（只可写在此处）：Chrome only*/</code></li></ul></li></ol><h2 id="_23-请解释一下-before-和-after-中的双冒号和单冒号的区别" tabindex="-1"><a class="header-anchor" href="#_23-请解释一下-before-和-after-中的双冒号和单冒号的区别" aria-hidden="true">#</a> 23. 请解释一下“::before”和“:after”中的双冒号和单冒号的区别</h2><p>如果你的网站只需要兼容 webkit、firefox、opera 等浏览器，建议对于伪元素采用双冒号的写法，如果不得不兼容 IE 浏览器，还是用 CSS2 的单冒号写法比较安全</p>',6);function A(V,H){const i=o("RouterLink"),t=o("ExternalLinkIcon");return d(),u("div",null,[k,n("div",h,[v,n("p",null,[a("伪类与伪元素对应使用示例参考"),s(i,{to:"/frontend/css/CSS%E4%BC%AA%E7%B1%BB%E4%B8%8E%E4%BC%AA%E5%85%83%E7%B4%A0.html"},{default:p(()=>[a("CSS 伪类与伪元素")]),_:1})])]),g,n("div",m,[b,n("ol",null,[x,f,n("li",null,[a("为了提高可读性推荐使用 scss ，"),s(i,{to:"/frontend/css/SCSS.html"},{default:p(()=>[a("scss 常用语法")]),_:1})])])]),n("table",null,[n("thead",null,[n("tr",null,[n("th",null,[n("a",_,[a("LESS"),s(t)])]),n("th",null,[n("a",y,[a("SASS"),s(t)])])])]),S]),q,C,w,n("ul",null,[n("li",null,[n("a",E,[a("参考文章"),s(t)])])]),B,n("div",F,[z,n("p",null,[n("a",I,[a("HACK 概念"),s(t)])])]),L])}const G=c(r,[["render",A],["__file","CSS.html.vue"]]);export{G as default};
