const e=JSON.parse('{"key":"v-a5a6295c","path":"/frontend/vue/Electron%20and%20Vue%E6%A1%8C%E9%9D%A2%E7%AB%AF.html","title":"Electron+Vue桌面端","lang":"zh-CN","frontmatter":{"title":"Electron+Vue桌面端","order":1,"date":"2022-10-11T00:00:00.000Z","category":["前端框架"],"tag":["混合开发","桌面端","Vue","Electron"],"sticky":true,"star":false,"description":"Electron+Vue桌面端 背景 因具体业务需要，技术栈要能够对电脑硬盘文件进行读写。最开始使用技术栈为 javaFx 构建，使用过程中发现构建页面，自定义 UI 页面困难，而且整个生态环境非常不好，与 Winforms 一样，自定义一些控件相对比较困难，研究起来比较耗费事件，项目周期又紧急，所以决定放弃 javaFx 技术栈，寻找新的技术栈。在一轮新的技术调研后，考虑到代码的可维护性和自定义 UI 页面以及结合项目业务。方案还剩两个技术方案。 方案一：C++ 和 Qt 相结合 方案二： electron 和 vue 全家桶 最终采用采用方案二，方案二便于自定义页面，通过 node.js 的 fs 模块可以实现对硬盘的读写。再加上scss和less 和现有前端框架的支撑。能够满足自定义 UI 页面。再加上 electron 本身的生态环境较好。而且此业务场景下不需要桌面应用太高的执行效率。再加上便于前后端分离开发，提高了效率。简单说一下方案一，具有很好的跨平台性，Qt还有可视化编辑器，可以用来自定义 UI，而且执行效率更好，可以说是桌面端开发利器了，这里不用的原因是学习成本有点高，项目周期紧，没时间研究","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/frontend/vue/Electron%20and%20Vue%E6%A1%8C%E9%9D%A2%E7%AB%AF.html"}],["meta",{"property":"og:site_name","content":"我睡着的时候不困唉"}],["meta",{"property":"og:title","content":"Electron+Vue桌面端"}],["meta",{"property":"og:description","content":"Electron+Vue桌面端 背景 因具体业务需要，技术栈要能够对电脑硬盘文件进行读写。最开始使用技术栈为 javaFx 构建，使用过程中发现构建页面，自定义 UI 页面困难，而且整个生态环境非常不好，与 Winforms 一样，自定义一些控件相对比较困难，研究起来比较耗费事件，项目周期又紧急，所以决定放弃 javaFx 技术栈，寻找新的技术栈。在一轮新的技术调研后，考虑到代码的可维护性和自定义 UI 页面以及结合项目业务。方案还剩两个技术方案。 方案一：C++ 和 Qt 相结合 方案二： electron 和 vue 全家桶 最终采用采用方案二，方案二便于自定义页面，通过 node.js 的 fs 模块可以实现对硬盘的读写。再加上scss和less 和现有前端框架的支撑。能够满足自定义 UI 页面。再加上 electron 本身的生态环境较好。而且此业务场景下不需要桌面应用太高的执行效率。再加上便于前后端分离开发，提高了效率。简单说一下方案一，具有很好的跨平台性，Qt还有可视化编辑器，可以用来自定义 UI，而且执行效率更好，可以说是桌面端开发利器了，这里不用的原因是学习成本有点高，项目周期紧，没时间研究"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"我睡着的时候不困唉"}],["meta",{"property":"article:tag","content":"混合开发"}],["meta",{"property":"article:tag","content":"桌面端"}],["meta",{"property":"article:tag","content":"Vue"}],["meta",{"property":"article:tag","content":"Electron"}],["meta",{"property":"article:published_time","content":"2022-10-11T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Electron+Vue桌面端\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-10-11T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"我睡着的时候不困唉\\",\\"url\\":\\"https://zmmlet.github.io/zmmblog/\\"}]}"]]},"headers":[{"level":2,"title":"背景","slug":"背景","link":"#背景","children":[]},{"level":2,"title":"项目环境","slug":"项目环境","link":"#项目环境","children":[]},{"level":2,"title":"项目创建方式","slug":"项目创建方式","link":"#项目创建方式","children":[{"level":3,"title":"方式一：electron-vue","slug":"方式一-electron-vue","link":"#方式一-electron-vue","children":[]},{"level":3,"title":"方式二：vue add electron-builder","slug":"方式二-vue-add-electron-builder","link":"#方式二-vue-add-electron-builder","children":[]}]},{"level":2,"title":"electron 知识点总结","slug":"electron-知识点总结","link":"#electron-知识点总结","children":[{"level":3,"title":"注意事项","slug":"注意事项","link":"#注意事项","children":[]},{"level":3,"title":"去除原生导航栏","slug":"去除原生导航栏","link":"#去除原生导航栏","children":[]},{"level":3,"title":"自定义菜单栏","slug":"自定义菜单栏","link":"#自定义菜单栏","children":[]},{"level":3,"title":"自定义窗口事件","slug":"自定义窗口事件","link":"#自定义窗口事件","children":[]},{"level":3,"title":"打开指定路径文件夹","slug":"打开指定路径文件夹","link":"#打开指定路径文件夹","children":[]},{"level":3,"title":"读取本机取网卡物理地址","slug":"读取本机取网卡物理地址","link":"#读取本机取网卡物理地址","children":[]},{"level":3,"title":"嵌入式数据库使用","slug":"嵌入式数据库使用","link":"#嵌入式数据库使用","children":[]},{"level":3,"title":"打包配置","slug":"打包配置","link":"#打包配置","children":[]}]},{"level":2,"title":"项目技术点","slug":"项目技术点","link":"#项目技术点","children":[{"level":3,"title":"遇到问题","slug":"遇到问题","link":"#遇到问题","children":[]},{"level":3,"title":"解决方案","slug":"解决方案","link":"#解决方案","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}]},{"level":2,"title":"遇到报错","slug":"遇到报错","link":"#遇到报错","children":[{"level":3,"title":"下载运行依赖失败","slug":"下载运行依赖失败","link":"#下载运行依赖失败","children":[]},{"level":3,"title":"运行白屏问题","slug":"运行白屏问题","link":"#运行白屏问题","children":[]}]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{},"readingTime":{"minutes":15,"words":4500},"filePathRelative":"frontend/vue/Electron and Vue桌面端.md","localizedDate":"2022年10月11日","excerpt":"<h1> Electron+Vue桌面端</h1>\\n<h2> 背景</h2>\\n<p>因具体业务需要，技术栈要能够对电脑硬盘文件进行读写。最开始使用技术栈为 javaFx 构建，使用过程中发现构建页面，自定义 UI 页面困难，而且整个生态环境非常不好，与 Winforms 一样，自定义一些控件相对比较困难，研究起来比较耗费事件，项目周期又紧急，所以决定放弃 javaFx 技术栈，寻找新的技术栈。在一轮新的技术调研后，考虑到代码的可维护性和自定义 UI 页面以及结合项目业务。方案还剩两个技术方案。</p>\\n<ul>\\n<li>方案一：<strong>C++</strong> 和 <strong>Qt</strong> 相结合</li>\\n<li>方案二： <strong>electron</strong> 和 <strong>vue 全家桶</strong>\\n最终采用<strong>采用方案二</strong>，方案二便于自定义页面，通过 <code>node.js</code> 的 <code>fs</code> 模块可以实现对硬盘的读写。再加上<code>scss</code>和<code>less</code> 和现有前端框架的支撑。能够满足自定义 UI 页面。再加上 <code>electron</code> 本身的生态环境较好。而且此业务场景下不需要桌面应用太高的执行效率。再加上便于前后端分离开发，提高了效率。简单说一下方案一，具有很好的跨平台性，<code>Qt</code>还有可视化编辑器，可以用来自定义 UI，而且执行效率更好，可以说是桌面端开发利器了，这里不用的原因是学习成本有点高，项目周期紧，没时间研究</li>\\n</ul>","autoDesc":true}');export{e as data};
