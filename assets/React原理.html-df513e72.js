const t=JSON.parse('{"key":"v-39cecba5","path":"/frontend/react/React%E5%8E%9F%E7%90%86.html","title":"React原理","lang":"zh-CN","frontmatter":{"title":"React原理","order":1,"date":"2022-11-07T00:00:00.000Z","category":["前端框架"],"tag":["React原理","setState","组件更新机制","组件性能优化"],"sticky":true,"star":false,"footer":"这是测试显示的页脚","copyright":"无版权","description":"React 原理 setState 更新数据 setState() 是异步更新数据的 注意：使用该语法时，后面的 setState() 不要依赖于前面的 setState() 当你调用 setState 的时候，React.js 并不会马上修改 state 而是把这个对象放到一个更新队列里面 稍后才会从队列当中把新的状态提取出来合并到 state 当中，然后再触发组件更新。 可以多次调用 setState() ，只会触发一次重新渲染","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/frontend/react/React%E5%8E%9F%E7%90%86.html"}],["meta",{"property":"og:site_name","content":"我睡着的时候不困唉"}],["meta",{"property":"og:title","content":"React原理"}],["meta",{"property":"og:description","content":"React 原理 setState 更新数据 setState() 是异步更新数据的 注意：使用该语法时，后面的 setState() 不要依赖于前面的 setState() 当你调用 setState 的时候，React.js 并不会马上修改 state 而是把这个对象放到一个更新队列里面 稍后才会从队列当中把新的状态提取出来合并到 state 当中，然后再触发组件更新。 可以多次调用 setState() ，只会触发一次重新渲染"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"我睡着的时候不困唉"}],["meta",{"property":"article:tag","content":"React原理"}],["meta",{"property":"article:tag","content":"setState"}],["meta",{"property":"article:tag","content":"组件更新机制"}],["meta",{"property":"article:tag","content":"组件性能优化"}],["meta",{"property":"article:published_time","content":"2022-11-07T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"React原理\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-11-07T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"我睡着的时候不困唉\\",\\"url\\":\\"https://zmmlet.github.io/zmmblog/\\"}]}"]]},"headers":[{"level":2,"title":"setState","slug":"setstate","link":"#setstate","children":[{"level":3,"title":"更新数据","slug":"更新数据","link":"#更新数据","children":[]},{"level":3,"title":"推荐语法","slug":"推荐语法","link":"#推荐语法","children":[]},{"level":3,"title":"第二个参数","slug":"第二个参数","link":"#第二个参数","children":[]}]},{"level":2,"title":"组件更新机制","slug":"组件更新机制","link":"#组件更新机制","children":[]},{"level":2,"title":"组件性能优化","slug":"组件性能优化","link":"#组件性能优化","children":[{"level":3,"title":"减轻 state","slug":"减轻-state","link":"#减轻-state","children":[]},{"level":3,"title":"避免不必要的重新渲染","slug":"避免不必要的重新渲染","link":"#避免不必要的重新渲染","children":[]},{"level":3,"title":"纯组件","slug":"纯组件","link":"#纯组件","children":[]},{"level":3,"title":"纯组件比较-值类型","slug":"纯组件比较-值类型","link":"#纯组件比较-值类型","children":[]},{"level":3,"title":"纯组件比较-引用类型","slug":"纯组件比较-引用类型","link":"#纯组件比较-引用类型","children":[]}]}],"git":{},"readingTime":{"minutes":4.79,"words":1436},"filePathRelative":"frontend/react/React原理.md","localizedDate":"2022年11月7日","excerpt":"<h1> React 原理</h1>\\n<h2> setState</h2>\\n<h3> 更新数据</h3>\\n<ul>\\n<li>setState() 是异步更新数据的</li>\\n<li>注意：使用该语法时，后面的 setState() 不要依赖于前面的 setState()</li>\\n</ul>\\n<ol>\\n<li>当你调用 setState 的时候，React.js 并不会马上修改 state</li>\\n<li>而是把这个对象放到一个更新队列里面</li>\\n<li>稍后才会从队列当中把新的状态提取出来合并到 state 当中，然后再触发组件更新。</li>\\n<li>可以多次调用 setState() ，只会触发一次重新渲染</li>\\n</ol>","autoDesc":true}');export{t as data};
