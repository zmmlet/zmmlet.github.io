import{_ as a,Q as s,S as n,a7 as e}from"./framework-ca2498c6.js";const t="/assets/images/jsx的优点.png",p={},o=e(`<h1 id="react-基础" tabindex="-1"><a class="header-anchor" href="#react-基础" aria-hidden="true">#</a> React 基础</h1><h2 id="环境依赖" tabindex="-1"><a class="header-anchor" href="#环境依赖" aria-hidden="true">#</a> 环境依赖</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>node -v
v14.18.1

npx -v
6.14.15

npm -v
6.14.15
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>npx 是 npm 5.2+附带的 package 运行工具</p></div><h2 id="react-介绍" tabindex="-1"><a class="header-anchor" href="#react-介绍" aria-hidden="true">#</a> React 介绍</h2><p>React 是一个用于构建用户界面的 javaScript 库</p><ul><li>React 是一个用于构建用户界面（UI，简单理解为:HTML 页面）的 javaScript 库</li><li>如果从 MVC 的角度，React 仅是视图层（V）的解决方案，也就是只负责视图层的渲染，并非提供了完整 M 和 C 的功能</li><li>react/react-router/redux 框架</li></ul><h2 id="react-特点" tabindex="-1"><a class="header-anchor" href="#react-特点" aria-hidden="true">#</a> React 特点</h2><ul><li>声明式 UI <ul><li>只需要描述 UI（HTML），和写 HTML 一样</li></ul><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> jsx <span class="token operator">=</span> <span class="token punctuation">(</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hello React!动态数据变化：</span><span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>生命是对应的式命令式，声明式关注组的 what，命令式关注的式 how</li></ul></li><li>组件化 <ul><li>组件时 React 中重要内容</li><li>组件用于表示页面中的部分内容</li><li>组合、服用多个组件，可以实现完整的页面功能</li></ul></li><li>多端使用 <ul><li>使用 <code>react/react-dom</code> 实现 <code>web</code> 应用</li><li>使用 <code>react/react-native</code> 开发移动端原生应用</li></ul></li></ul><h2 id="react-脚手架-cli" tabindex="-1"><a class="header-anchor" href="#react-脚手架-cli" aria-hidden="true">#</a> React 脚手架（CLI）</h2><h3 id="react-脚手架的介绍" tabindex="-1"><a class="header-anchor" href="#react-脚手架的介绍" aria-hidden="true">#</a> React 脚手架的介绍</h3><ul><li>脚手架：为了保证各施工过程顺利进行而搭设的工作平台</li><li>对于前端项目开发来说，脚手架是为了保证前端项目开发过程顺利进行而搭设的开发平台</li><li>脚手架的意义： <ul><li>现代的前端开发日趋成熟，需要依赖于各种工具，比如，webpack、babel、eslint、sass/less/postcss 等</li><li>工具配置繁琐、重复，各项目之间的配置大同小异</li><li>开发阶段、项目发布，配置不同 <ul><li>项目开始前，帮你搭好架子，省去繁琐的 webpack 配置</li><li>项目开发时，热更新、格式化代码、git 提交时自动校验代码格式等</li><li>项目发布时，一键自动打包，包括：代码压缩、优化、按需加载等</li></ul></li></ul></li></ul><h3 id="使用-react-脚手架创建项目" tabindex="-1"><a class="header-anchor" href="#使用-react-脚手架创建项目" aria-hidden="true">#</a> 使用 React 脚手架创建项目</h3><ul><li>命令：<code>npx create-react-app react-basic</code><ul><li>npx create-react-app 是固定命令，<code>create-react-app</code> 是 React 脚手架的名称</li><li>react-basic 表示项目名称，可以修改</li></ul></li><li>启动项目：<code>yarn start</code> or <code>npm start</code></li><li><code>npx</code> 是 npm v5.2 版本新添加的命令，用来简化 npm 中工具包的使用 <ul><li>原始：1 全局安装<code>npm i -g create-react-app</code> 2 在通过脚手架的命令来创建 React 项目</li><li>现在：npx 调用最新的 create-react-app 直接创建 React 项目</li></ul></li></ul><h3 id="项目目录结构说明和调整" tabindex="-1"><a class="header-anchor" href="#项目目录结构说明和调整" aria-hidden="true">#</a> 项目目录结构说明和调整</h3><ul><li>说明： <ul><li><code>src</code> 目录是我们写代码进行项目开发的目录</li><li>查看 <code>package.json</code> 两个核心库：<code>react</code>、<code>react-dom</code>（脚手架已经帮我们安装好，我们直接用即可）</li></ul></li><li>调整： <ol><li>删除 src 目录下的所有文件</li><li>创建 index.js 文件作为项目的入口文件，在这个文件中写 React 代码即可</li></ol></li></ul><h2 id="react-基本使用" tabindex="-1"><a class="header-anchor" href="#react-基本使用" aria-hidden="true">#</a> React 基本使用</h2><h3 id="基本步骤" tabindex="-1"><a class="header-anchor" href="#基本步骤" aria-hidden="true">#</a> 基本步骤</h3><ul><li>使用步骤</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>- 导入react和react-dom
- 创建react元素(虚拟DOM)
- 渲染react元素到页面中
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>导入 react 和 react-dom</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 导入react和react-dom</span>
<span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>
<span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">&#39;react-dom&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>创建 react 元素</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 创建元素</span>
<span class="token keyword">const</span> title <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;h1&#39;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&#39;hello react&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>渲染 react 元素到页面</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 渲染react元素</span>
ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;root&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="练习" tabindex="-1"><a class="header-anchor" href="#练习" aria-hidden="true">#</a> 练习</h3><ol><li>使用 react，生成以下结构</li></ol><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>box<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>demo<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  这是一个react案例
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>生成结构 2</li></ol><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>list<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">香蕉</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">橘子</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">苹果</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="jsx-的基本使用" tabindex="-1"><a class="header-anchor" href="#jsx-的基本使用" aria-hidden="true">#</a> JSX 的基本使用</h2><h3 id="createelement-的问题" tabindex="-1"><a class="header-anchor" href="#createelement-的问题" aria-hidden="true">#</a> createElement 的问题</h3><ul><li>繁琐不简洁</li><li>不直观，无法一眼看出所描述的结构</li><li>不优雅，开发体验不好</li></ul><figure><img src="`+t+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="jsx-简介" tabindex="-1"><a class="header-anchor" href="#jsx-简介" aria-hidden="true">#</a> JSX 简介</h3><p><code>JSX</code>是<code>JavaScript XML</code>的简写，表示了在 Javascript 代码中写 XML(HTML)格式的代码</p><p>优势：声明式语法更加直观，与 HTML 结构相同，降低学习成本，提高开发效率。</p><p><strong>JSX 是 react 的核心内容</strong></p><p>注意：<em>JSX 不是标准的 JS 语法，是 JS 的语法扩展。脚手架中内置的 <a href="@babel/plugin-transform-react-jsx">@babel/plugin-transform-react-jsx</a> 包，用来解析该语法。</em></p><p>![JSX 声明式vs命令式](images/JSX 声明式 vs 命令式-1629116328806.png)</p><h3 id="使用步骤" tabindex="-1"><a class="header-anchor" href="#使用步骤" aria-hidden="true">#</a> 使用步骤</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>- 导入react和reactDOM包
- 使用jsx语法创建react元素
- 把react元素渲染到页面中
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>导入 react 和 reactDOM</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 导入react和react-dom</span>
<span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>
<span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">&#39;react-dom&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>创建 react 元素</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 创建元素</span>
<span class="token keyword">const</span> title <span class="token operator">=</span> <span class="token operator">&lt;</span>h1 title<span class="token operator">=</span><span class="token string">&quot;哈哈&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>渲染元素</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 渲染元素</span>
ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;root&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="jsx-注意点" tabindex="-1"><a class="header-anchor" href="#jsx-注意点" aria-hidden="true">#</a> JSX 注意点</h3><ul><li><p>只有在脚手架中才能使用 jsx 语法</p><ul><li>因为 JSX 需要经过 babel 的编译处理，才能在浏览器中使用。脚手架中已经默认有了这个配置。</li></ul></li><li><p>JSX 必须要有一个根节点， <code>&lt;&gt;&lt;/&gt;</code> <code>&lt;React.Fragment&gt;&lt;/React.Fragment&gt;</code></p></li><li><p>没有子节点的元素可以使用<code>/&gt;</code>结束</p></li><li><p>JSX 中语法更接近与 JavaScript</p><ul><li><code>class</code> =====&gt; <code>className</code></li><li><code>for</code>========&gt; <code>htmlFor</code></li></ul></li><li><p>JSX 可以换行，如果 JSX 有多行，推荐使用<code>()</code>包裹 JSX，防止自动插入分号的 bug</p></li></ul><h2 id="jsx-中嵌入-javascript-表达式" tabindex="-1"><a class="header-anchor" href="#jsx-中嵌入-javascript-表达式" aria-hidden="true">#</a> JSX 中嵌入 JavaScript 表达式</h2><blockquote><p>在 jsx 中可以在<code>{}</code>来使用 js 表达式</p></blockquote><ul><li>基本使用</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">&#39;zs&#39;</span>
<span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token number">18</span>
<span class="token keyword">const</span> title <span class="token operator">=</span> <span class="token punctuation">(</span>
  <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>
    姓名：<span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token punctuation">,</span> 年龄：<span class="token punctuation">{</span>age<span class="token punctuation">}</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>可以访问对象的属性</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> car <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">brand</span><span class="token operator">:</span> <span class="token string">&#39;玛莎拉蒂&#39;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> title <span class="token operator">=</span> <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>汽车：<span class="token punctuation">{</span>car<span class="token punctuation">.</span>brand<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>可以访问数组的下标</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> friends <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;李四&#39;</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> title <span class="token operator">=</span> <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>汽车：<span class="token punctuation">{</span>friends<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>可以使用三元运算符</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> gender <span class="token operator">=</span> <span class="token number">18</span>
<span class="token keyword">const</span> title <span class="token operator">=</span> <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>性别：<span class="token punctuation">{</span>age <span class="token operator">&gt;=</span> <span class="token number">18</span> <span class="token operator">?</span> <span class="token string">&#39;是&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;否&#39;</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>可以调用方法</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token string">&#39;你好&#39;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> title <span class="token operator">=</span> <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>姓名：<span class="token punctuation">{</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>JSX 本身</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> span <span class="token operator">=</span> <span class="token operator">&lt;</span>span<span class="token operator">&gt;</span>我是一个span<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>
<span class="token keyword">const</span> title <span class="token operator">=</span> <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>盒子<span class="token punctuation">{</span>span<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>JSX 中的注释</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span><span class="token comment">/* 这是jsx中的注释 */</span><span class="token punctuation">}</span>   推荐快键键 ctrl <span class="token operator">+</span> <span class="token operator">/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>不要出现语句，比如<code>if</code> <code>for</code></li></ul><h2 id="条件渲染" tabindex="-1"><a class="header-anchor" href="#条件渲染" aria-hidden="true">#</a> 条件渲染</h2><blockquote><p>在 react 中，一切都是 javascript，所以条件渲染完全是通过 js 来控制的</p></blockquote><ul><li>通过判断<code>if/else</code>控制</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> isLoding <span class="token operator">=</span> <span class="token boolean">false</span>
<span class="token keyword">const</span> <span class="token function-variable function">loadData</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>isLoding<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>数据加载中<span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>数据加载完成，此处显示加载后的数据<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> title <span class="token operator">=</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>条件渲染：<span class="token punctuation">{</span><span class="token function">loadData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>通过三元运算符控制</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> isLoding <span class="token operator">=</span> <span class="token boolean">false</span>
<span class="token keyword">const</span> <span class="token function-variable function">loadData</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> isLoding <span class="token operator">?</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>数据加载中<span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>数据加载完成，此处显示加载后的数据<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>逻辑运算符</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> isLoding <span class="token operator">=</span> <span class="token boolean">false</span>
<span class="token keyword">const</span> <span class="token function-variable function">loadData</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> isLoding <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>加载中<span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> title <span class="token operator">=</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>条件渲染：<span class="token punctuation">{</span><span class="token function">loadData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="列表渲染" tabindex="-1"><a class="header-anchor" href="#列表渲染" aria-hidden="true">#</a> 列表渲染</h2><blockquote><p>我们经常需要遍历一个数组来重复渲染一段结构</p><p>在 react 中，通过 map 方法进行列表的渲染</p></blockquote><ul><li>列表的渲染</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> songs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;温柔&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;倔强&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;私奔到月球&#39;</span><span class="token punctuation">]</span>

<span class="token keyword">const</span> list <span class="token operator">=</span> songs<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">song</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span><span class="token punctuation">{</span>song<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> dv <span class="token operator">=</span> <span class="token punctuation">(</span>
  <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span><span class="token punctuation">{</span>list<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>直接在 JSX 中渲染</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> songs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;温柔&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;倔强&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;私奔到月球&#39;</span><span class="token punctuation">]</span>

<span class="token keyword">const</span> dv <span class="token operator">=</span> <span class="token punctuation">(</span>
  <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span>
      <span class="token punctuation">{</span>songs<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">song</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>
        <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span><span class="token punctuation">{</span>song<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>
      <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>key 属性的使用</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> dv <span class="token operator">=</span> <span class="token punctuation">(</span>
  <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span>
      <span class="token punctuation">{</span>songs<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">song</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>
        <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token punctuation">{</span>song<span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>song<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>
      <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意：列表渲染时应该给重复渲染的元素添加 key 属性，key 属性的值要保证唯一</strong></p><p><strong>注意：key 值避免使用 index 下标，因为下标会发生改变</strong></p><h2 id="样式处理" tabindex="-1"><a class="header-anchor" href="#样式处理" aria-hidden="true">#</a> 样式处理</h2><h3 id="行内样式-style" tabindex="-1"><a class="header-anchor" href="#行内样式-style" aria-hidden="true">#</a> 行内样式-style</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> dv <span class="token operator">=</span> <span class="token punctuation">(</span>
  <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">backgroundColor</span><span class="token operator">:</span> <span class="token string">&#39;pink&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>style样式<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="类名-classname" tabindex="-1"><a class="header-anchor" href="#类名-classname" aria-hidden="true">#</a> 类名-className</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 导入样式</span>
<span class="token keyword">import</span> <span class="token string">&#39;./base.css&#39;</span>
<span class="token keyword">const</span> dv <span class="token operator">=</span> <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&quot;title&quot;</span><span class="token operator">&gt;</span>style样式<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>base.css 样式文件</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.title</span> <span class="token punctuation">{</span>
  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><ul><li><p>JSX 是 React 的核心内容</p></li><li><p>JSX 表示在 JS 代码中书写 HTML 结构，是 React 声明式的体现</p></li><li><p>使用 JSX 配合嵌入的 JS 表达式，条件渲染，列表渲染，可以渲染任意的 UI 结构</p></li><li><p>结果使用 className 和 style 的方式给 JSX 添加样式</p></li><li><p>React 完全利用 JS 的语言自身的能力来编写 UI，而不是造轮子增强 HTML 的功能。（对比 VUE）</p></li></ul>`,95),l=[o];function c(i,r){return s(),n("div",null,l)}const u=a(p,[["render",c],["__file","React基础.html.vue"]]);export{u as default};
