import{_ as e,Q as a,S as r,a7 as t}from"./framework-ca2498c6.js";const d={},h=t('<h1 id="redux-状态容器" tabindex="-1"><a class="header-anchor" href="#redux-状态容器" aria-hidden="true">#</a> Redux 状态容器</h1><h2 id="redux-介绍" tabindex="-1"><a class="header-anchor" href="#redux-介绍" aria-hidden="true">#</a> Redux 介绍</h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>提供通用的状态管理，比如登录获取到的 token，路由激活状态，多组件共享数据等，类似于 Vuex 的功能</p></div><h3 id="redux-目的" tabindex="-1"><a class="header-anchor" href="#redux-目的" aria-hidden="true">#</a> Redux 目的</h3><p>随着 JavaScript 单页应用开发日趋复杂，JavaScript 需要管理比任何时候都要多的 state （状态）。 这些 state 可能包括服务器响应、缓存数据、本地生成尚未持久化到服务器的数据，也包括 UI 状态，如激活的路由，被选中的标签，是否显示加载动效或者分页器等等</p><h3 id="三大原则" tabindex="-1"><a class="header-anchor" href="#三大原则" aria-hidden="true">#</a> 三大原则</h3><h4 id="单一数据源" tabindex="-1"><a class="header-anchor" href="#单一数据源" aria-hidden="true">#</a> 单一数据源</h4><p>整个应用的 state 被储存在一棵 object tree 中，并且这个 object tree 只存在于唯一一个 store 中。</p><h4 id="state-是只读的" tabindex="-1"><a class="header-anchor" href="#state-是只读的" aria-hidden="true">#</a> State 是只读的</h4><p>唯一改变 state 的方法就是触发 action，action 是一个用于描述已发生事件的普通对象。</p><h4 id="使用纯函数来执行修改" tabindex="-1"><a class="header-anchor" href="#使用纯函数来执行修改" aria-hidden="true">#</a> 使用纯函数来执行修改</h4><p>为了描述 action 如何改变 state tree ，你需要编写 reducers。</p><h3 id="redux-安装" tabindex="-1"><a class="header-anchor" href="#redux-安装" aria-hidden="true">#</a> Redux 安装</h3><p>pnpm add --save redux</p>',14),i=[h];function n(c,s){return a(),r("div",null,i)}const u=e(d,[["render",n],["__file","Redux.html.vue"]]);export{u as default};
