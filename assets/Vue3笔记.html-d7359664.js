const e=JSON.parse('{"key":"v-7e4967cd","path":"/frontend/vue/Vue3%E7%AC%94%E8%AE%B0.html","title":"Vue3 笔记","lang":"zh-CN","frontmatter":{"category":["前端框架"],"tag":["基础语法","vue3"],"description":"Vue3 笔记 setup 函数 setup 函数是 vue3 的核心 也是所有函数的入口 这个函数传入两个参数，分别为 props 和 context props 为 父组件传递的参数，而 context 为 attrs, emit, slots props 是响应式的，但是不可以 使用 解构或者展开，这样会 导致响应式 失败（原因会在第二点讲） context 可以使用解构，slots 相当于以前的 $slots emit 相当于以前的 $emit，attrs 则是在组件标签上的内容 props 和 attrs 的区别： 如下面代码 所示，name 属性 在 props 参数对象中定义了的，就会进入 props 里面， 否则 其他在组件标签上的内容会进入 attrs 里面","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/frontend/vue/Vue3%E7%AC%94%E8%AE%B0.html"}],["meta",{"property":"og:site_name","content":"我睡着的时候不困唉"}],["meta",{"property":"og:title","content":"Vue3 笔记"}],["meta",{"property":"og:description","content":"Vue3 笔记 setup 函数 setup 函数是 vue3 的核心 也是所有函数的入口 这个函数传入两个参数，分别为 props 和 context props 为 父组件传递的参数，而 context 为 attrs, emit, slots props 是响应式的，但是不可以 使用 解构或者展开，这样会 导致响应式 失败（原因会在第二点讲） context 可以使用解构，slots 相当于以前的 $slots emit 相当于以前的 $emit，attrs 则是在组件标签上的内容 props 和 attrs 的区别： 如下面代码 所示，name 属性 在 props 参数对象中定义了的，就会进入 props 里面， 否则 其他在组件标签上的内容会进入 attrs 里面"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"我睡着的时候不困唉"}],["meta",{"property":"article:tag","content":"基础语法"}],["meta",{"property":"article:tag","content":"vue3"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Vue3 笔记\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"我睡着的时候不困唉\\",\\"url\\":\\"https://zmmlet.github.io/zmmblog/\\"}]}"]]},"headers":[{"level":2,"title":"setup 函数","slug":"setup-函数","link":"#setup-函数","children":[]},{"level":2,"title":"reactive、ref 与 toRefs","slug":"reactive、ref-与-torefs","link":"#reactive、ref-与-torefs","children":[]},{"level":2,"title":"生命周期钩子","slug":"生命周期钩子","link":"#生命周期钩子","children":[]},{"level":2,"title":"watch 与 watchEffect","slug":"watch-与-watcheffect","link":"#watch-与-watcheffect","children":[]},{"level":2,"title":"父子传值","slug":"父子传值","link":"#父子传值","children":[]},{"level":2,"title":"通过 ref 获取 dom 元素","slug":"通过-ref-获取-dom-元素","link":"#通过-ref-获取-dom-元素","children":[]},{"level":2,"title":"自定义 Hooks","slug":"自定义-hooks","link":"#自定义-hooks","children":[]},{"level":2,"title":"移除过滤器 filters 使用 computed 替代","slug":"移除过滤器-filters-使用-computed-替代","link":"#移除过滤器-filters-使用-computed-替代","children":[]},{"level":2,"title":"实例之 button 组件","slug":"实例之-button-组件","link":"#实例之-button-组件","children":[]}],"git":{},"readingTime":{"minutes":8.57,"words":2570},"filePathRelative":"frontend/vue/Vue3笔记.md","excerpt":"<h1> Vue3 笔记</h1>\\n<h2> setup 函数</h2>\\n<p><code>setup</code> 函数是 <code>vue3</code> 的核心 也是所有函数的入口\\n这个函数传入两个参数，分别为 <code>props</code> 和 <code>context</code>\\n<code>props</code> 为 父组件传递的参数，而 <code>context</code> 为 <code>attrs</code>, <code>emit</code>, <code>slots</code>\\n<code>props</code> 是响应式的，但是不可以 使用 解构或者展开，这样会 导致响应式 失败（原因会在第二点讲）\\n<code>context</code> 可以使用解构，<code>slots</code> 相当于以前的 <code>$slots</code>\\n<code>emit</code> 相当于以前的 <code>$emit</code>，<code>attrs</code> 则是在组件标签上的内容\\n<code>props</code> 和 <code>attrs</code> 的区别：\\n如下面代码 <code>所示，name</code> 属性 在 <code>props</code> 参数对象中定义了的，就会进入 <code>props</code> 里面，\\n否则 其他在组件标签上的内容会进入 <code>attrs</code> 里面</p>","autoDesc":true}');export{e as data};
