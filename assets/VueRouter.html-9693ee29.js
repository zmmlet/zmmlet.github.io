const n=JSON.parse(`{"key":"v-44b2d617","path":"/frontend/vue/VueRouter.html","title":"Vue Router 笔记(Vue2)","lang":"zh-CN","frontmatter":{"category":["前端框架"],"tag":["基础语法","vue","VueRouter","路由守卫"],"description":"Vue Router 笔记(Vue2) vue-router 全局有三个守卫 • router.beforeEach：全局前置守卫，进入路由之前 • router.beforeResolve：全局解析守卫，在 beforeRouteEnter 调用之后调用 • router.afterEach：全局后置钩子，进入路由之后 全局路由守卫 import Vue from 'vue' import Router from 'vue-router' import route from './router' Vue.use(Router) const router = new Router({ routes: route // 路由列表 }) // 模拟用户登录与否 const HAS_LOGIN = true // 全局前置守卫 // 在Router实例上进行守卫 router.beforeEach((to, from, next) =&gt; { // to和from都是路由实例 // to：即将跳转到的路由 // from：现在的要离开的路由 // next：函数 // 如果未登录，就跳到登录页，如果登录了，选择哪个页面跳到哪个页面；如果登录了还去了login页面，就跳到首页。 if (to.name !== 'login') { if (HAS_LOGIN) next() else next({ name: 'login' }) } else { if (HAS_LOGIN) next({ name: 'home' }) else next() } }) // 全局解析守卫 router.beforeResolve((to, from, next) =&gt; {}) // 全局后置钩子 router.afterEach((to, from) =&gt; {}) export default router","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/frontend/vue/VueRouter.html"}],["meta",{"property":"og:site_name","content":"我睡着的时候不困唉"}],["meta",{"property":"og:title","content":"Vue Router 笔记(Vue2)"}],["meta",{"property":"og:description","content":"Vue Router 笔记(Vue2) vue-router 全局有三个守卫 • router.beforeEach：全局前置守卫，进入路由之前 • router.beforeResolve：全局解析守卫，在 beforeRouteEnter 调用之后调用 • router.afterEach：全局后置钩子，进入路由之后 全局路由守卫 import Vue from 'vue' import Router from 'vue-router' import route from './router' Vue.use(Router) const router = new Router({ routes: route // 路由列表 }) // 模拟用户登录与否 const HAS_LOGIN = true // 全局前置守卫 // 在Router实例上进行守卫 router.beforeEach((to, from, next) =&gt; { // to和from都是路由实例 // to：即将跳转到的路由 // from：现在的要离开的路由 // next：函数 // 如果未登录，就跳到登录页，如果登录了，选择哪个页面跳到哪个页面；如果登录了还去了login页面，就跳到首页。 if (to.name !== 'login') { if (HAS_LOGIN) next() else next({ name: 'login' }) } else { if (HAS_LOGIN) next({ name: 'home' }) else next() } }) // 全局解析守卫 router.beforeResolve((to, from, next) =&gt; {}) // 全局后置钩子 router.afterEach((to, from) =&gt; {}) export default router"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"我睡着的时候不困唉"}],["meta",{"property":"article:tag","content":"基础语法"}],["meta",{"property":"article:tag","content":"vue"}],["meta",{"property":"article:tag","content":"VueRouter"}],["meta",{"property":"article:tag","content":"路由守卫"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Vue Router 笔记(Vue2)\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"我睡着的时候不困唉\\",\\"url\\":\\"https://zmmlet.github.io/zmmblog/\\"}]}"]]},"headers":[{"level":2,"title":"全局路由守卫","slug":"全局路由守卫","link":"#全局路由守卫","children":[]},{"level":2,"title":"为某些路由单独配置守卫","slug":"为某些路由单独配置守卫","link":"#为某些路由单独配置守卫","children":[]},{"level":2,"title":"路由组件内的守卫","slug":"路由组件内的守卫","link":"#路由组件内的守卫","children":[]},{"level":2,"title":"导航解析流程","slug":"导航解析流程","link":"#导航解析流程","children":[]},{"level":2,"title":"点击重复路由控制台报错","slug":"点击重复路由控制台报错","link":"#点击重复路由控制台报错","children":[]}],"git":{},"readingTime":{"minutes":3.24,"words":971},"filePathRelative":"frontend/vue/VueRouter.md","excerpt":"<h1> Vue Router 笔记(Vue2)</h1>\\n<p><strong>vue-router 全局有三个守卫</strong>\\n• router.beforeEach：全局前置守卫，进入路由之前\\n• router.beforeResolve：全局解析守卫，在 beforeRouteEnter 调用之后调用\\n• router.afterEach：全局后置钩子，进入路由之后</p>\\n<h2> 全局路由守卫</h2>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">import</span> Vue <span class=\\"token keyword\\">from</span> <span class=\\"token string\\">'vue'</span>\\n<span class=\\"token keyword\\">import</span> Router <span class=\\"token keyword\\">from</span> <span class=\\"token string\\">'vue-router'</span>\\n<span class=\\"token keyword\\">import</span> route <span class=\\"token keyword\\">from</span> <span class=\\"token string\\">'./router'</span>\\nVue<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">use</span><span class=\\"token punctuation\\">(</span>Router<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">const</span> router <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Router</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token literal-property property\\">routes</span><span class=\\"token operator\\">:</span> route <span class=\\"token comment\\">// 路由列表</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token comment\\">// 模拟用户登录与否</span>\\n<span class=\\"token keyword\\">const</span> <span class=\\"token constant\\">HAS_LOGIN</span> <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">true</span>\\n<span class=\\"token comment\\">// 全局前置守卫</span>\\n<span class=\\"token comment\\">// 在Router实例上进行守卫</span>\\nrouter<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">beforeEach</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">to<span class=\\"token punctuation\\">,</span> from<span class=\\"token punctuation\\">,</span> next</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token comment\\">// to和from都是路由实例</span>\\n  <span class=\\"token comment\\">// to：即将跳转到的路由</span>\\n  <span class=\\"token comment\\">// from：现在的要离开的路由</span>\\n  <span class=\\"token comment\\">// next：函数</span>\\n  <span class=\\"token comment\\">// 如果未登录，就跳到登录页，如果登录了，选择哪个页面跳到哪个页面；如果登录了还去了login页面，就跳到首页。</span>\\n  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>to<span class=\\"token punctuation\\">.</span>name <span class=\\"token operator\\">!==</span> <span class=\\"token string\\">'login'</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token constant\\">HAS_LOGIN</span><span class=\\"token punctuation\\">)</span> <span class=\\"token function\\">next</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">else</span> <span class=\\"token function\\">next</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">{</span> <span class=\\"token literal-property property\\">name</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'login'</span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token constant\\">HAS_LOGIN</span><span class=\\"token punctuation\\">)</span> <span class=\\"token function\\">next</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">{</span> <span class=\\"token literal-property property\\">name</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'home'</span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">else</span> <span class=\\"token function\\">next</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token comment\\">// 全局解析守卫</span>\\nrouter<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">beforeResolve</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">to<span class=\\"token punctuation\\">,</span> from<span class=\\"token punctuation\\">,</span> next</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token comment\\">// 全局后置钩子</span>\\nrouter<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">afterEach</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">to<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">from</span></span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">export</span> <span class=\\"token keyword\\">default</span> router\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
