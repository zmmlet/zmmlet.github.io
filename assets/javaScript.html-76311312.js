import{_ as t,Q as p,S as o,U as n,a4 as s,a6 as c,a7 as a,E as i}from"./framework-ca2498c6.js";const l="/assets/images/基础数据类型.png",u="/assets/images/引用数据类型.png",d="/assets/images/image-20210305172448582.png",r="/assets/images/image-20210306093300970.png",k={},v=a('<h1 id="javascript" tabindex="-1"><a class="header-anchor" href="#javascript" aria-hidden="true">#</a> javaScript</h1><h2 id="_1-js-的基本类型有哪些-引用类型有哪些-null-和-undefined-的区别" tabindex="-1"><a class="header-anchor" href="#_1-js-的基本类型有哪些-引用类型有哪些-null-和-undefined-的区别" aria-hidden="true">#</a> 1.js 的基本类型有哪些？引用类型有哪些？null 和 undefined 的区别</h2><h3 id="基础数据类型" tabindex="-1"><a class="header-anchor" href="#基础数据类型" aria-hidden="true">#</a> 基础数据类型</h3><p>undefined、null、boolean、number、string</p><h3 id="引用数据类型" tabindex="-1"><a class="header-anchor" href="#引用数据类型" aria-hidden="true">#</a> 引用数据类型</h3><p>function、object、array</p><h3 id="null-和-undefined-的区别" tabindex="-1"><a class="header-anchor" href="#null-和-undefined-的区别" aria-hidden="true">#</a> null 和 undefined 的区别</h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p>javaScript（ECMAScript 标准）里共有 5 种基本类型：Undefined, Null, Boolean, Number, String，和一种复杂类型 Object。可以看到 null 和 undefined 分属不同的类型，未初始化定义的值用 typeof 检测出来是&quot;undefined&quot;(字符串)，而 null 值用 typeof 检测出来是&quot;object&quot;（字符串）。任何时候都不建议显式的设置一个变量为 undefined，但是如果保存对象的变量还没有真正保存对象，应该设置成 null。实际上，undefined 值是派生自 null 值的，ECMAScript 标准规定对二者进行相等性测试要返回 true</p></div><ol><li>undefined:表示变量声明但未初始化时的值</li><li>null 表示准备用来保存对象，还没有真正保存对象的值。从逻辑角度看，null 值表示一个空对象指针</li></ol><h2 id="_2-如何判断一个变量是-array-类型-如何判断一个变量是-number-类型" tabindex="-1"><a class="header-anchor" href="#_2-如何判断一个变量是-array-类型-如何判断一个变量是-number-类型" aria-hidden="true">#</a> 2.如何判断一个变量是 Array 类型？如何判断一个变量是 Number 类型</h2><ol><li>从原型入手，<code>Array.prototype.isPrototypeOf(obj)</code>也可以从构造函数入手，<code>obj instanceof Array</code>根据对象的<code>class</code>属性(类属性)，跨原型链调用<code>toString()</code>方法。Array.isArray()方法。</li><li><code>isNaN()</code>是一个函数，用 isNaN 判断一个变量，返回一个<code>Boolean</code>值。若返回的值为 false，则为可以转换成数字类型；返回的值是 true，则不能转换成数字类型</li><li><code>typeof()</code> 判断</li></ol><h2 id="_3-object-是引用类型嘛-引用类型和基本数据类型有什么区别-堆栈关系了解吗" tabindex="-1"><a class="header-anchor" href="#_3-object-是引用类型嘛-引用类型和基本数据类型有什么区别-堆栈关系了解吗" aria-hidden="true">#</a> 3.Object 是引用类型嘛？引用类型和基本数据类型有什么区别？堆栈关系了解吗</h2><p>Object 是引用类型。</p><h3 id="基本类型" tabindex="-1"><a class="header-anchor" href="#基本类型" aria-hidden="true">#</a> 基本类型</h3><ol><li>基本类型的值是不可变得</li><li>基本类型的比较是值的比较</li><li>基本类型的变量是存放在栈区的（栈区指内存里的栈内存）</li></ol><h3 id="引用类型" tabindex="-1"><a class="header-anchor" href="#引用类型" aria-hidden="true">#</a> 引用类型</h3><ol start="4"><li>引用类型的值是可变的</li><li>引用类型的值是同时保存在栈内存和堆内存中的对象</li></ol><h3 id="引用类型与基本类型比较" tabindex="-1"><a class="header-anchor" href="#引用类型与基本类型比较" aria-hidden="true">#</a> 引用类型与基本类型比较</h3><table><tr><td>基本类型：string,number,boolean,null,undefined</td><td>引用类型：Function,Array,Object</td></tr><tr><td colspan="2">访问方式</td></tr><tr><td>操作和保存在变量的实际的值</td><td>存在内存中，js 不许直接访问内存，操作的是对象的引用</td></tr><tr><td colspan="2">存储的位置</td></tr><tr><td> 保存在栈区 <img src="'+l+'"></td><td> 引用存放在栈区，实际对象保存在堆区 <img src="'+u+`"></td></tr></table><h2 id="_4-解释一下事件冒泡和事件捕获" tabindex="-1"><a class="header-anchor" href="#_4-解释一下事件冒泡和事件捕获" aria-hidden="true">#</a> 4.解释一下事件冒泡和事件捕获</h2><ol><li>事件冒泡：当你使用事件捕获时，父级元素先触发，子级元素后触发</li><li>事件捕获：当你使用事件冒泡时，子级元素先触发，父级元素后触发</li></ol><h2 id="_5-事件委托-事件冒泡和捕获-如何阻止冒泡-如何阻止默认事件" tabindex="-1"><a class="header-anchor" href="#_5-事件委托-事件冒泡和捕获-如何阻止冒泡-如何阻止默认事件" aria-hidden="true">#</a> 5.事件委托，事件冒泡和捕获，如何阻止冒泡，如何阻止默认事件</h2><p><strong>事件委托：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> toolbar <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.toolbar&#39;</span><span class="token punctuation">)</span>
toolbar<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> button <span class="token operator">=</span> e<span class="token punctuation">.</span>target
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>button<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&#39;active&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    button<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&#39;active&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    button<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">&#39;active&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>事件冒泡，就是元素自身的事件被触发后，如果父元素有相同的事件，如<code>onclick</code>事件，那么元素本身的触发状态就会传递，也就是冒到父元素，父元素的相同事件也会一级一级根据嵌套关系向外触发，直到<code>document/window</code>，冒泡过程结束</p><p>但是事件冒泡在某些应用场景产生一些问题，就是我们不需要触发的事件，由于冒泡的原因，也会运行。所以在这个时候要取消事件冒泡。<strong>阻止事件冒泡如下:</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>box<span class="token punctuation">.</span><span class="token function-variable function">onmouseover</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 阻止冒泡</span>
  event <span class="token operator">=</span> event <span class="token operator">||</span> window<span class="token punctuation">.</span>event
  <span class="token keyword">if</span> <span class="token punctuation">(</span>event <span class="token operator">&amp;&amp;</span> event<span class="token punctuation">.</span>stopPropagation<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    event<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    event<span class="token punctuation">.</span>cancelBubble <span class="token operator">=</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>事件捕获，与事件冒泡相反，事件会从最外层开始发生，直到最具体的元素。事件捕获的概念下发生<code>click</code>事件的顺序应该是<code>document -&gt; html -&gt; body -&gt; div -&gt; p</code>。<strong>阻止事件冒泡如下:</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 阻止浏览器的默认行为</span>
<span class="token keyword">function</span> <span class="token function">stopDefault</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 阻止默认浏览器动作（W3C）</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">&amp;&amp;</span> e<span class="token punctuation">.</span>preventDefault<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    window<span class="token punctuation">.</span>event<span class="token punctuation">.</span>returnValue <span class="token operator">=</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-对闭包的理解-什么时候构成闭包-闭包的实现方法-闭包的优缺点" tabindex="-1"><a class="header-anchor" href="#_6-对闭包的理解-什么时候构成闭包-闭包的实现方法-闭包的优缺点" aria-hidden="true">#</a> 6.对闭包的理解？什么时候构成闭包？闭包的实现方法？闭包的优缺点</h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>函数内部可以直接读取全局变量，但是在函数外部无法读取函数内部的局部变量。闭包就是能够读取其他函数内部变量的函数。内部函数对外部函数的变量有了引用关系——闭包就是这时产生的。每次对外部函数的调用，都会产生一次闭包</p></div><h3 id="实现方法" tabindex="-1"><a class="header-anchor" href="#实现方法" aria-hidden="true">#</a> 实现方法</h3><ol><li>给函数添加一些属性</li><li>声明一个变量，将一个函数当做值赋给变量</li><li><code>new</code>一个对象，然后给对象添加属性和方法</li><li><code>var obj={}</code>就是声明一个空的对象</li></ol><h3 id="用处" tabindex="-1"><a class="header-anchor" href="#用处" aria-hidden="true">#</a> 用处</h3><p>它的最大用处有两个，一个是前面提到的可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中，不会在 f1 调用后被自动清除。</p><ol><li>由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在 IE 中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。</li><li>闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。</li></ol><h2 id="_7-this-有哪些使用场景-跟-java-中的-this-有什么区别-如何改变-this-的指向" tabindex="-1"><a class="header-anchor" href="#_7-this-有哪些使用场景-跟-java-中的-this-有什么区别-如何改变-this-的指向" aria-hidden="true">#</a> 7.this 有哪些使用场景？跟 JAVA 中的 this 有什么区别？如何改变 this 的指向</h2><h3 id="this-的使用场景" tabindex="-1"><a class="header-anchor" href="#this-的使用场景" aria-hidden="true">#</a> this 的使用场景</h3><ol><li>全局&amp;调用普通函数，在全局环境中，<code>this</code> 永远指向 <code>window</code></li><li>构造函数，如果函数作为构造函数使用，那么其中的 <code>this</code> 就代表它即将 <code>new</code> 出来的对象</li><li>对象方法，如果函数作为对象的方法时，方法中的 <code>this</code> 指向该对象。注意：若是在对象方法中定义函数，那么情况就不同了。函数 <code>a</code> 虽然是在 <code>b</code> 内部定义的,但它仍然属于一个普通函数，<code>this</code> 仍指向 <code>window</code></li><li>构造函数 <code>prototype</code> 属性，即便是在整个原型链中，this 代表的也是当前对象的值</li><li>函数用 <code>call</code>、<code>apply</code>或者 <code>bind</code> 调用，当一个函数被 <code>call</code>、<code>apply</code> 或者 <code>bind</code> 调用时，<code>this</code> 的值就取传入的对象的值</li><li><code>DOM event this</code>，前六种情况其实可以总结为： <code>this</code> 指向调用该方法的对象</li><li>箭头函数中的 <code>this</code>，当使用箭头函数的时候，情况就有所不同了：箭头函数内部的 <code>this</code> 是词法作用域，由上下文确定</li></ol><h2 id="跟-java-中的-this-有什么区别" tabindex="-1"><a class="header-anchor" href="#跟-java-中的-this-有什么区别" aria-hidden="true">#</a> 跟 JAVA 中的 this 有什么区别</h2><p><code>java</code>中<code>this.value</code>可以再本类中调用全局变量,也可以在构造器中用<code>this()</code>调用其他构造器,也可以用<code>this</code>表示当前对象 JavaScript 中<code>this</code>指的是这个函数所属的对象的值,当<code>new</code>一个函数时,这个 this 就会指向这个 new 出来的对象,<code>apply()</code>和<code>call()</code>可以改变一个函数中<code>this</code>指向的对象<code>call</code>和<code>apply</code>都可以改变<code>this</code>指向，不过<code>call</code>的第二个参数是散列分布，<code>apply</code>则可以是一个数组</p><h2 id="_8-call-apply-bind-有什么区别" tabindex="-1"><a class="header-anchor" href="#_8-call-apply-bind-有什么区别" aria-hidden="true">#</a> 8.call,apply,bind 有什么区别</h2><ol><li><code>call()</code> 和 <code>apply()</code>的第一个参数相同，就是指定的对象。这个对象就是该函数的执行上下文。</li><li><code>call()</code>在第一个参数之后的 后续所有参数就是传入该函数的值。</li><li><code>apply()</code> 只有两个参数，第一个是对象，第二个是数组，这个数组就是该函数的参数。</li><li><code>bind()</code> 方法和前两者不同在于： <code>bind()</code> 方法会返回执行上下文被改变的函数而不会立即执行，而前两者是直接执行该函数。他的参数和 <code>call()</code>相同。</li></ol><h2 id="_9-变量提升" tabindex="-1"><a class="header-anchor" href="#_9-变量提升" aria-hidden="true">#</a> 9.变量提升</h2><p>javaScript 中，函数及变量的声明都将被提升到函数的最顶部 javaScript 中，变量可以在使用后声明，变量允许先使用再进行声明 javaScript 只有声明的变量会提升，初始化的不会</p><h2 id="_10-typeof-能得到哪些值" tabindex="-1"><a class="header-anchor" href="#_10-typeof-能得到哪些值" aria-hidden="true">#</a> 10.typeof 能得到哪些值</h2><p>number、boolean、string、undefined、object、function</p><h2 id="_11-匿名函数典型用例" tabindex="-1"><a class="header-anchor" href="#_11-匿名函数典型用例" aria-hidden="true">#</a> 11.匿名函数典型用例</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1.无参匿名函数</span>
<span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;-----&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 2.携参匿名函数</span>
<span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_12-创建对象有几种方式" tabindex="-1"><a class="header-anchor" href="#_12-创建对象有几种方式" aria-hidden="true">#</a> 12.创建对象有几种方式</h2><ol><li>通过{}创建对象</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 使用 {} 创建对象，等同于 new Object()</span>
<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;测试&#39;</span>
obj<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">20</span>

obj<span class="token punctuation">.</span><span class="token function-variable function">sayName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&#39;-&#39;</span> <span class="token operator">+</span> obj<span class="token punctuation">.</span>age<span class="token punctuation">)</span>
obj<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>new Object()</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 创建对象</span>
obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;测试&#39;</span>
obj<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">20</span>

obj<span class="token punctuation">.</span><span class="token function-variable function">sayName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
obj<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> obj<span class="token punctuation">)</span> <span class="token comment">// object</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>使用字面量</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;zhang&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>前面三种创建对象的方式存在 2 个问题： 1.代码冗余； 2.对象中的方法不能共享，每个对象中的方法都是独立的</p></div><ol start="4"><li>工厂模式</li></ol><p>工厂模式创建对象，减少重复代码，解决代码冗余问题，但不能共享对象</p><p>优点：【解决了代码重复问题】缺点：【调用的还是不同的方法】</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 定义工厂方法</span>
<span class="token keyword">function</span> <span class="token function">createObjectFactory</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  obj<span class="token punctuation">.</span>name <span class="token operator">=</span> name
  obj<span class="token punctuation">.</span><span class="token function-variable function">sayName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> obj
<span class="token punctuation">}</span>
<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token function">createObjectFactory</span><span class="token punctuation">(</span><span class="token string">&#39;zhang&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token function">createObjectFactory</span><span class="token punctuation">(</span><span class="token string">&#39;liu&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>sayName <span class="token operator">===</span> b<span class="token punctuation">.</span>sayName<span class="token punctuation">)</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>构造函数模式（<code>constructor</code>）</li></ol><p>构造函数：用 new 关键字来进行调用的函数称为构造函数，一般首字母要大写</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 创建构造函数</span>
<span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">sayName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;zhang&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">)</span>

p1<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
p2<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>constructor <span class="token operator">===</span> p2<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span> <span class="token comment">//true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Person<span class="token punctuation">)</span> <span class="token comment">//true</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> p1<span class="token punctuation">)</span> <span class="token comment">//object</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1 <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span> <span class="token comment">//true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p2 <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span> <span class="token comment">//trueb</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>sayName <span class="token operator">===</span> p2<span class="token punctuation">.</span>sayName<span class="token punctuation">)</span> <span class="token comment">//false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="6"><li>原型模式（<code>prototype</code>）</li></ol><p>每个方法中都有一个原型（prototype），每个原型都有一个构造器（constructor），构造器又指向这个方法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token class-name">Animal</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;animal&#39;</span>
<span class="token class-name">Animal</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> a1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> a2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

a1<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a1<span class="token punctuation">.</span>sayName <span class="token operator">===</span> a2<span class="token punctuation">.</span>sayName<span class="token punctuation">)</span> <span class="token comment">//true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Animal</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span> <span class="token comment">//function Animal(){}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Animal</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">==</span> Animal<span class="token punctuation">)</span> <span class="token comment">//true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="7"><li>组合使用：构造模式+原型模式</li></ol><p>结合了上面两种方式，解决了代码冗余，方法不能共享，引用类型改变值的问题</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token keyword">this</span><span class="token punctuation">.</span>friends <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;dog&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;cat&#39;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span class="token class-name">Animal</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> a1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">&#39;d&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> a2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span>
a1<span class="token punctuation">.</span>friends<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;snake&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a1<span class="token punctuation">.</span>friends<span class="token punctuation">)</span> <span class="token comment">//[dog,cat,snake]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a2<span class="token punctuation">.</span>friends<span class="token punctuation">)</span> <span class="token comment">//[dog,cat]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_13-document-load和document-domcontentloaded两个事件之前的区别" tabindex="-1"><a class="header-anchor" href="#_13-document-load和document-domcontentloaded两个事件之前的区别" aria-hidden="true">#</a> 13.<code>document load</code>和<code>document DOMContentLoaded</code>两个事件之前的区别</h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>区别：触发时机不一样，先触发 <code>DOMContentLoaded</code>事件，后触发 <code>load</code>事件</p></div><p><strong>DOM 文档加载的步骤：</strong></p><ol><li>解析 HTML 结构</li><li>加载外部脚本和样式表文件</li><li>解析并执行脚本代码</li><li>DOM 树构建完成，DOMContentLoaded 事件触发</li><li>加载图片等外部文件</li><li>页面加载完毕，load 事件触发</li></ol><h2 id="_14-new-一个对象具体做了什么" tabindex="-1"><a class="header-anchor" href="#_14-new-一个对象具体做了什么" aria-hidden="true">#</a> 14.New 一个对象具体做了什么</h2><p>使用关键字 new 创建新实例对象经过了以下几步</p><ol><li>创建一个新对象，如：<code>var person = {}</code></li><li>新对象的 <code>_proto_</code> 属性执行构造函数的原型对象</li><li>将构造函数的作用域赋值给新对象（所以 this 对象指向新对象）</li><li>执行构造函数内部的代码，将书香添加给 <code>person</code> 中的 <code>this</code> 对象</li><li>返回新对象<code>person</code></li></ol><h2 id="_15-js-的参数使用什么方式进行传递的" tabindex="-1"><a class="header-anchor" href="#_15-js-的参数使用什么方式进行传递的" aria-hidden="true">#</a> 15.js 的参数使用什么方式进行传递的</h2><p>基础类型的传递方式比较简单，是按照<code>值传递</code>进行的</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  x <span class="token operator">=</span> <span class="token number">10</span> <span class="token comment">// 并不会改变实参值</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">test</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// 10</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>复杂类型，传递的是地址</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">1</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  x<span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">10</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">test</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// {count: 10}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// {count: 10}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_16-javascript-垃圾回收" tabindex="-1"><a class="header-anchor" href="#_16-javascript-垃圾回收" aria-hidden="true">#</a> 16.javaScript 垃圾回收</h2><p>js 中的内存分配和回收都是自动完成的，内存在不使用的时候会被垃圾回收器自动回收。如果不关注 js 内存管理问题，不了解 js 内存管理机制，同样容易造成内存泄露（内存无法被回收）的情况</p><h3 id="内存的生命周期" tabindex="-1"><a class="header-anchor" href="#内存的生命周期" aria-hidden="true">#</a> 内存的生命周期</h3><p>js 环境中分配的内存，一般有如下生命周期：</p><ol><li>内存分配：声明变量、函数、对象的时候，系统会自动为其分配内存</li><li>内存使用：即读写内存，也就是使用变量、函数等</li><li>内存回收：使用完毕，由来及回收自动回收不再使用的内存</li></ol><p>内存分配</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 为变量分配内存</span>
<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">11</span>
<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token string">&#39;code&#39;</span>

<span class="token comment">// 为对象分配内存</span>
<span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;code&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">20</span>
<span class="token punctuation">}</span>

<span class="token comment">// 为函数分配内存</span>
<span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="垃圾回收算法说明" tabindex="-1"><a class="header-anchor" href="#垃圾回收算法说明" aria-hidden="true">#</a> 垃圾回收算法说明</h3><p>所谓垃圾回收, 核心思想就是如何判断内存是否已经不再会被使用了, 如果是, 就视为垃圾, 释放掉</p><p>下面介绍两种常见的浏览器垃圾回收算法: 引用计数 和 标记清除法</p><h3 id="引用计数" tabindex="-1"><a class="header-anchor" href="#引用计数" aria-hidden="true">#</a> 引用计数</h3><p>IE 采用的引用计数算法, 定义“内存不再使用”的标准很简单，就是看一个对象是否有指向它的引用。</p><p>如果没有任何变量指向它了，说明该对象已经不再需要了。</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// 创建一个对象person, person指向一块内存空间, 该内存空间的引用数 +1</span>
<span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">22</span><span class="token punctuation">,</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;ifcode&#39;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> p <span class="token operator">=</span> person <span class="token comment">// 两个变量指向一块内存空间, 该内存空间的引用数为 2</span>
person <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">// 原来的person对象被赋值为1，对象内存空间的引用数-1,</span>
<span class="token comment">// 但因为p指向原person对象，还剩一个对于对象空间的引用, 所以对象它不会被回收</span>

p <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token comment">// 原person对象已经没有引用，会被回收</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由上面可以看出，引用计数算法是个简单有效的算法。</p><p><strong>但它却存在一个致命的问题：循环引用。</strong></p><p>如果两个对象相互引用，尽管他们已不再使用，垃圾回收器不会进行回收，导致内存泄露。</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">function</span> <span class="token function">cycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> o1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">let</span> o2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  o1<span class="token punctuation">.</span>a <span class="token operator">=</span> o2
  o2<span class="token punctuation">.</span>a <span class="token operator">=</span> o1
  <span class="token keyword">return</span> <span class="token string">&#39;Cycle reference!&#39;</span>
<span class="token punctuation">}</span>

<span class="token function">cycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="标记清除算法" tabindex="-1"><a class="header-anchor" href="#标记清除算法" aria-hidden="true">#</a> 标记清除算法</h3><p>现代的浏览器已经不再使用引用计数算法了。</p><p>现代浏览器通用的大多是基于标记清除算法的某些改进算法，总体思想都是一致的。</p><p>标记清除法:</p><ul><li><p>标记清除算法将“不再使用的对象”定义为“无法达到的对象”。</p></li><li><p>简单来说，就是从根部（在 JS 中就是全局对象）出发定时扫描内存中的对象。</p></li><li><p>凡是能从根部到达的对象，都是还需要使用的。那些无法由根部出发触及到的对象被标记为不再使用，稍后进行回收。</p></li></ul><p>从这个概念可以看出，无法触及的对象包含了没有引用的对象这个概念（没有任何引用的对象也是无法触及的对象）。</p><p>根据这个概念，上面的例子可以正确被垃圾回收处理了。</p>',108),m={href:"https://www.jianshu.com/p/84a8fd5fa0ee",target:"_blank",rel:"noopener noreferrer"},b=a(`<h2 id="_17-javascript-作用域链的理解" tabindex="-1"><a class="header-anchor" href="#_17-javascript-作用域链的理解" aria-hidden="true">#</a> 17.javaScript 作用域链的理解</h2><p>JavaScript 在执⾏过程中会创建一个个的<strong>可执⾏上下⽂</strong>。 (每个函数执行都会创建这么一个可执行上下文)</p><p>每个可执⾏上下⽂的词法环境中包含了对外部词法环境的引⽤，可通过该引⽤来获取外部词法环境中的变量和声明等。</p><p>这些引⽤串联起来，⼀直指向全局的词法环境，形成一个链式结构，被称为作⽤域链。</p><p>简而言之: 函数内部 可以访问到 函数外部作用域的变量, 而外部函数还可以访问到全局作用域的变量,</p><p>这样的变量作用域访问的链式结构, 被称之为作用域链</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">1</span>

<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">100</span>
  <span class="token keyword">function</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下图为由多个可执行上下文组成的调用栈：</p><ul><li>栈最底部为<code>全局可执行上下文</code></li><li><code>全局可执行上下文</code> 之上有多个 <code>函数可执行上下文</code></li><li>每个可执行上下文中包含了指向外部其他可执行上下文的引用，直到 <code>全局可执行上下文</code> 时它指向 <code>null</code></li></ul><figure><img src="`+r+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>js 全局有全局可执行上下文, 每个函数调用时, 有着函数的可执行上下文, 会入 js 调用栈</p><p>每个可执行上下文, 都有者对于外部上下文词法作用域的引用, 外部上下文也有着对于再外部的上下文词法作用域的引用</p><p><strong>=&gt; 就形成了作用域链</strong></p><h2 id="_18-闭包的理解" tabindex="-1"><a class="header-anchor" href="#_18-闭包的理解" aria-hidden="true">#</a> 18.闭包的理解</h2><p>这个问题想考察的主要有两个方面：</p><ul><li>对闭包的基本概念的理解</li><li>对闭包的作用的了解</li></ul><p><strong>什么是闭包？</strong></p><p>MDN 的官方解释：</p><blockquote><p>闭包是函数和声明该函数的词法环境的组合</p></blockquote><p>更通俗一点的解释是：</p><blockquote><p>内层函数, 引用外层函数上的变量, 就可以形成闭包</p></blockquote><p>需求: 定义一个计数器方法, 每次执行一次函数, 就调用一次进行计数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  count<span class="token operator">++</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;fn函数被调用了&#39;</span> <span class="token operator">+</span> count <span class="token operator">+</span> <span class="token string">&#39;次&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样不好! count 定义成了全局变量, 太容易被别人修改了, 我们可以利用闭包解决</p><p>闭包实例:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span>

  <span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    count<span class="token operator">++</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;fn函数被调用了&#39;</span> <span class="token operator">+</span> count <span class="token operator">+</span> <span class="token string">&#39;次&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> add
<span class="token punctuation">}</span>
<span class="token keyword">const</span> addFn <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">addFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">addFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">addFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>闭包的主要作用是什么？</strong></p><p>在实际开发中，闭包最大的作用就是用来 <strong>变量私有</strong>。</p><p>下面再来看一个简单示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 以 let 声明一个局部变量，而不是 this.name</span>
  <span class="token comment">// this.name = &#39;zs&#39;     =&gt;  p.name</span>
  <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">&#39;hm_programmer&#39;</span> <span class="token comment">// 数据私有</span>

  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> name
  <span class="token punctuation">}</span>

  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">setName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    name <span class="token operator">=</span> value
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// new:</span>
<span class="token comment">// 1. 创建一个新的对象</span>
<span class="token comment">// 2. 让构造函数的this指向这个新对象</span>
<span class="token comment">// 3. 执行构造函数</span>
<span class="token comment">// 4. 返回实例</span>
<span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// hm_programmer</span>

p<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&#39;Tom&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// Tom</span>

p<span class="token punctuation">.</span>name <span class="token comment">// 访问不到 name 变量：undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在此示例中，变量 <code>name</code> 只能通过 Person 的实例方法进行访问，外部不能直接通过实例进行访问，形成了一个私有变量。</p>`,31);function h(f,g){const e=i("ExternalLinkIcon");return p(),o("div",null,[v,n("p",null,[s("参考文章："),n("a",m,[s("JavaScript 内存管理"),c(e)])]),b])}const j=t(k,[["render",h],["__file","javaScript.html.vue"]]);export{j as default};
