import{_ as t,Q as o,S as p,U as n,a4 as s,a6 as e,a7 as l,E as c}from"./framework-ca2498c6.js";const d={},i=n("h1",{id:"sql-基础语法",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#sql-基础语法","aria-hidden":"true"},"#"),s(" SQL 基础语法")],-1),r={href:"https://www.bilibili.com/video/BV1Vy4y1z7EX?spm_id_from=333.788.top_right_bar_window_custom_collection.content.click",target:"_blank",rel:"noopener noreferrer"},u={href:"https://www.bilibili.com/video/BV1xW411u7ax",target:"_blank",rel:"noopener noreferrer"},k=l(`<h2 id="sql-概述" tabindex="-1"><a class="header-anchor" href="#sql-概述" aria-hidden="true">#</a> SQL 概述</h2><p>结构化查询语言（Structured Query Language）简称 SQL，是一种特殊目的的编程语言，是一种数据库查询和程序设计语言，用于存取数据以及查询、更新和管理关系数据库系统。</p><h2 id="什么是数据库" tabindex="-1"><a class="header-anchor" href="#什么是数据库" aria-hidden="true">#</a> 什么是数据库</h2><p>数据库专业的来说,其实就是一种电子的仓库,是专门储存数据和管理管理数据的一种处所,用户可以对数据库中的数据进行新增和更新或者删除等操作。数据库(database)是保存有组织的数据的容器</p><h2 id="mysql-基本概念" tabindex="-1"><a class="header-anchor" href="#mysql-基本概念" aria-hidden="true">#</a> Mysql 基本概念</h2><p>MySQL 是一个关系型数据库管理系统，由瑞典 MySQL AB 公司开发，属于 Oracle 旗下产品。MySQL 是最流行的关系型数据库管理系统之一，在 WEB 应用方面，MySQL 是最好的 RDBMS (Relational Database Management System，关系数据库管理系统)</p><h2 id="数据库表的理解" tabindex="-1"><a class="header-anchor" href="#数据库表的理解" aria-hidden="true">#</a> 数据库表的理解</h2><ol><li>数据库中最基本的单元是表 table，数据库中以 table 的形式表示数据</li><li>任何一张表都有行和列： <ul><li>行（row）：被称为数据/记录</li><li>列（column）：被称为字段 <ul><li>字段包含，字段名、数据类型、约束等属性</li><li>字段名可以理解是一个普通的名称，命名尽量做到见名知意</li><li>数据类型：子字符串、数字、日期等</li><li>约束：约束也有很多，其中一个叫做唯一约束，唯一约束添加后，该字段的数据值不能够重复</li></ul></li></ul></li></ol><h2 id="sql-语句分类" tabindex="-1"><a class="header-anchor" href="#sql-语句分类" aria-hidden="true">#</a> SQL 语句分类</h2><ul><li>DQL：数据库查询语言（凡是带有 select 关键字的都是查询语句） <ul><li>select...</li></ul></li><li>DML：数据库操作语言（凡是对表中的数据进行增删改都是 DML） <ul><li>insert 增</li><li>delete 删</li><li>update 改</li></ul></li><li>DDL：数据定义语言，凡是带有 create、drop、alter 的都是 DDL， DDL 主要操作的是表结构的增删改 <ul><li>create 新建、等同于增</li><li>drop 删除</li><li>alter 修改</li></ul></li><li>TCL：事务控制语言，包含如下内容： <ul><li>事务提交 commit</li><li>事务回滚 rollback</li></ul></li><li>DCL：数据控制语言 <ul><li>授权 grant</li><li>撤销权限 revoke...</li></ul></li></ul><h2 id="sql-编写" tabindex="-1"><a class="header-anchor" href="#sql-编写" aria-hidden="true">#</a> SQL 编写</h2><p>对于 SQL 语句来说，都是通用的，所有的 SQL 语句以<code>;</code>结尾，SQL 语句不区分大小写<br></p><blockquote><p>注意：所有数据库中，字符串统一使用单引号括起来，单引号是标准的，双引号在 oracle 数据库中用不了，但是可以在 mysql 中使用</p></blockquote><h3 id="简单查询" tabindex="-1"><a class="header-anchor" href="#简单查询" aria-hidden="true">#</a> 简单查询</h3><ol><li>查询一个字段：<code>SELECT 字段名 FROM 表名;</code> SELECT 和 from 关键字，字段名和表名都是标识符</li></ol><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> name <span class="token keyword">FROM</span> demo<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>查询两个字段：<code>SELECT 字段名1,字段名2 FROM 表名;</code> 多个字段用<code>,</code>分割</li></ol><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> name<span class="token punctuation">,</span>id <span class="token keyword">FROM</span> demo<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>查询全部 <ul><li>第一种方式：把每个字段都写上<code>SELECT a,b,c,d,e,f,g FROM 表名;</code></li><li>第二种方式：<code>SELECT * FROM 表名;</code> <strong>不推荐，执行效率低，可读性比较差</strong></li></ul></li><li>起别名进行查询 使用<code>as</code>关键字起别名 <code>SELECT 字段名 as 别名 FROM 表名;</code> 注意只是将显示的查询结果，使用别名进行显示，原表字段名不会进行修改<div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> name <span class="token keyword">as</span> nameId <span class="token keyword">FROM</span> demo<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>可以通过空格的形式省略 <code>as</code> 关键字</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> name nameId <span class="token keyword">FROM</span> demo<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>起别名，别名中间不允许添加空格，如果一定要加空格别名<strong>使用单引号或者双引号</strong>引起来</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> name <span class="token keyword">as</span> <span class="token string">&#39;name Id&#39;</span> <span class="token keyword">FROM</span> demo<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li>查询表字段<code>DESC 表名</code></li><li>查询员工姓名和员工对应的 12 个月的薪资,起别名显示查询结果</li></ol><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> name<span class="token punctuation">,</span>wages<span class="token operator">*</span><span class="token number">12</span> <span class="token keyword">as</span> yearwages <span class="token keyword">FROM</span> demo<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="条件查询" tabindex="-1"><a class="header-anchor" href="#条件查询" aria-hidden="true">#</a> 条件查询</h3><blockquote><p>条件查询需要用到 where 语句，where 必须放到 from 语句表的后面，支持如下运算符</p></blockquote><table><thead><tr><th>运算符</th><th>说明</th></tr></thead><tbody><tr><td><code>= </code></td><td>等于</td></tr><tr><td><code>&lt;&gt;</code> 或 <code>!=</code></td><td>不等于</td></tr><tr><td><code>&gt; </code></td><td>大于</td></tr><tr><td><code>&lt; </code></td><td>小于</td></tr><tr><td><code>&gt;=</code></td><td>大于等于</td></tr><tr><td><code>&lt;=</code></td><td>小于等于</td></tr><tr><td><code>BETWEEN...AND...</code></td><td>两个值之间，等同于 <code>&gt;= and &lt;=</code> <strong>BETWEEN...AND...需要遵循左小右大，闭区间，包含左大右小</strong></td></tr><tr><td><code>is null</code></td><td>为 null（is not null 不为空）</td></tr><tr><td><code>and</code></td><td>并且</td></tr><tr><td><code>or</code></td><td>或者</td></tr><tr><td><code>in</code></td><td>包含，相当于多个 or（not in 不在这个范围中）</td></tr><tr><td><code>like</code></td><td>like 称为模糊查询，支持<code>%</code>或<code>_</code>下划线匹配，<code>%</code>匹配任意个字符，下划线，一个下划线只能匹配一个字符</td></tr></tbody></table><blockquote><p>基础语法：<code>SELECT 查询列表 FROM 表名 WHERE 筛选表达式;</code></p></blockquote><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">/*等于：查询年龄为20岁的人员*/</span>
<span class="token keyword">SELECT</span> name<span class="token punctuation">,</span>age <span class="token keyword">FROM</span> demo <span class="token keyword">WHERE</span> age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>

<span class="token comment">/*不等：查询年龄不为20岁的人员*/</span>
<span class="token keyword">SELECT</span> name<span class="token punctuation">,</span>age <span class="token keyword">FROM</span> demo <span class="token keyword">WHERE</span> age <span class="token operator">!=</span> <span class="token number">20</span><span class="token punctuation">;</span>

<span class="token comment">/*不等：查询年龄不为20岁的人员*/</span>
<span class="token keyword">SELECT</span> name<span class="token punctuation">,</span>age <span class="token keyword">FROM</span> demo <span class="token keyword">WHERE</span> age <span class="token operator">&lt;&gt;</span> <span class="token number">20</span><span class="token punctuation">;</span>

<span class="token comment">/*小于：查询年龄小于20岁的人员*/</span>
<span class="token keyword">SELECT</span> name<span class="token punctuation">,</span>age <span class="token keyword">FROM</span> demo <span class="token keyword">WHERE</span> age <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span>

<span class="token comment">/*小于等于：查询年龄小于等于20岁的人员*/</span>
<span class="token keyword">SELECT</span> name<span class="token punctuation">,</span>age <span class="token keyword">FROM</span> demo <span class="token keyword">WHERE</span> age <span class="token operator">&lt;=</span> <span class="token number">20</span><span class="token punctuation">;</span>

<span class="token comment">/*大于：查询年龄小于20岁的人员*/</span>
<span class="token keyword">SELECT</span> name<span class="token punctuation">,</span>age <span class="token keyword">FROM</span> demo <span class="token keyword">WHERE</span> age <span class="token operator">&gt;</span> <span class="token number">20</span><span class="token punctuation">;</span>

<span class="token comment">/*大于等于：查询年龄大于等于20岁的人员*/</span>
<span class="token keyword">SELECT</span> name<span class="token punctuation">,</span>age <span class="token keyword">FROM</span> demo <span class="token keyword">WHERE</span> age <span class="token operator">&gt;=</span> <span class="token number">20</span><span class="token punctuation">;</span>

<span class="token comment">/*两个值之间：查询年龄大于等于20岁小于等于30岁的人员*/</span>
<span class="token keyword">SELECT</span> name<span class="token punctuation">,</span>age <span class="token keyword">FROM</span> demo <span class="token keyword">WHERE</span> age <span class="token operator">&gt;=</span> <span class="token number">20</span> <span class="token operator">and</span> age <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">;</span>

<span class="token comment">/*两个值之间：查询年龄大于等于20岁小于等于30岁的人员*/</span>
<span class="token keyword">SELECT</span> name<span class="token punctuation">,</span>age <span class="token keyword">FROM</span> demo <span class="token keyword">WHERE</span> age <span class="token operator">BETWEEN</span> <span class="token number">20</span> <span class="token operator">and</span> <span class="token number">30</span><span class="token punctuation">;</span>

<span class="token comment">/*is null查询为空:查询数据库中 email 邮箱字段值为空的人员*/</span>
<span class="token keyword">SELECT</span> name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>email <span class="token keyword">FROM</span> demo <span class="token keyword">WHERE</span> email <span class="token operator">is</span> <span class="token boolean">null</span><span class="token punctuation">;</span>

<span class="token comment">/*is not null查询不为空:查询数据库中 email 邮箱字段值不为空的人员*/</span>
<span class="token keyword">SELECT</span> name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>email <span class="token keyword">FROM</span> demo <span class="token keyword">WHERE</span> email <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">;</span>

<span class="token comment">/*and并且:查询数据库中 email 邮箱字段值为空且年龄等于28岁的人员*/</span>
<span class="token keyword">SELECT</span> name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>email <span class="token keyword">FROM</span> demo <span class="token keyword">WHERE</span> age <span class="token operator">=</span> <span class="token number">28</span> <span class="token operator">and</span> email <span class="token operator">is</span> <span class="token boolean">null</span><span class="token punctuation">;</span>

<span class="token comment">/*or或者:查询数据库中 age 字段值为28或者age值为20的人员*/</span>
<span class="token keyword">SELECT</span> name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>email <span class="token keyword">FROM</span> demo <span class="token keyword">WHERE</span> age <span class="token operator">=</span> <span class="token number">28</span> <span class="token operator">or</span> age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>

<span class="token comment">/* and 和 or 同时出现优先级问题，and 优先级比 or 高，先执行 and 后执行 or,如需先执行or需要使用小括号括起来 */</span>
<span class="token keyword">SELECT</span> name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex <span class="token keyword">FROM</span> demo <span class="token keyword">WHERE</span> sex <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">and</span> <span class="token punctuation">(</span>age <span class="token operator">=</span> <span class="token number">26</span> <span class="token operator">or</span> age <span class="token operator">&gt;</span> <span class="token number">35</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/* in相当于多个or查询，查询age值为20和38的 */</span>
<span class="token keyword">SELECT</span> name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex <span class="token keyword">FROM</span> demo <span class="token keyword">WHERE</span> age <span class="token operator">in</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/* not in相当于多个or查询，查询age值不为20和38的 */</span>
<span class="token keyword">SELECT</span> name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex <span class="token keyword">FROM</span> demo <span class="token keyword">WHERE</span> age <span class="token operator">not</span> <span class="token operator">in</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*like模糊查询：查找名字中包含zh的 % 匹配任意个字符*/</span>
<span class="token keyword">SELECT</span> name<span class="token punctuation">,</span>age <span class="token keyword">FROM</span> demo <span class="token keyword">WHERE</span> name <span class="token operator">LIKE</span> <span class="token string">&#39;%zh%&#39;</span><span class="token punctuation">;</span>

<span class="token comment">/*like模糊查询：查找名字中以ao结尾的 % 匹配任意个字符*/</span>
<span class="token keyword">SELECT</span> name<span class="token punctuation">,</span>age <span class="token keyword">FROM</span> demo <span class="token keyword">WHERE</span> name <span class="token operator">LIKE</span> <span class="token string">&#39;%ao&#39;</span><span class="token punctuation">;</span>

<span class="token comment">/*like模糊查询：查找名字中以d开头的 % 匹配任意个字符*/</span>
<span class="token keyword">SELECT</span> name<span class="token punctuation">,</span>age <span class="token keyword">FROM</span> demo <span class="token keyword">WHERE</span> name <span class="token operator">LIKE</span> <span class="token string">&#39;d%&#39;</span><span class="token punctuation">;</span>

<span class="token comment">/*like模糊查询：查找名字中第二个字母是c的 % 匹配任意个字符*/</span>
<span class="token keyword">SELECT</span> name<span class="token punctuation">,</span>age <span class="token keyword">FROM</span> demo <span class="token keyword">WHERE</span> name <span class="token operator">LIKE</span> <span class="token string">&#39;_c%&#39;</span><span class="token punctuation">;</span>

<span class="token comment">/*like模糊查询：查找名字中第三个字母是o的 % 匹配任意个字符*/</span>
<span class="token keyword">SELECT</span> name<span class="token punctuation">,</span>age <span class="token keyword">FROM</span> demo <span class="token keyword">WHERE</span> name <span class="token operator">LIKE</span> <span class="token string">&#39;__o%&#39;</span><span class="token punctuation">;</span>

<span class="token comment">/*like模糊查询：查找名字中包含下划线的，使用转义符*/</span>
<span class="token keyword">SELECT</span> name<span class="token punctuation">,</span>age <span class="token keyword">FROM</span> demo <span class="token keyword">WHERE</span> name <span class="token operator">LIKE</span> <span class="token string">&#39;%\\_%&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意事项：</p><ol><li>所有数据库中，字符串统一使用单引号括起来</li><li>and 和 or 同时出现优先级问题，and 优先级比 or 高，先执行 and 后执行 or，如需先执行 or 需要使用小括号括起来</li><li>in 不是一个区间，in 后面跟的是具体的值，找出符合具体条件值的</li><li>如果在模糊查询匹配数据时数据中存在特殊字符比如下划线可以使用转义符<code>\\</code>进行转换</li></ol></blockquote><h3 id="排序数据" tabindex="-1"><a class="header-anchor" href="#排序数据" aria-hidden="true">#</a> 排序数据</h3><p>排序采用 order by 子语句，order by 后面跟上排序字段，排序字段可以放多个使用逗号分割，order by 默认采用升序，如果存在 where 子语句那么 order by 必须放到 where 语句的后面</p><ol><li>单一字段排序 <ul><li>order by 默认采用升序 asc</li><li>order by 如果需要按照升序进行排列，需要添加 desc 关键字</li></ul></li></ol><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">/*默认升序*/</span>
<span class="token keyword">SELECT</span> name<span class="token punctuation">,</span>age <span class="token keyword">FROM</span> demo <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> age<span class="token punctuation">;</span>
<span class="token comment">/*使用 desc 关键字进行降序*/</span>
<span class="token keyword">SELECT</span> name<span class="token punctuation">,</span>age <span class="token keyword">FROM</span> demo <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> age <span class="token keyword">DESC</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>多个字段排序</li></ol><p>查询人员名字和薪资，按照年龄进行升序排序，如果年龄一样，按照姓名升序排序</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">/*age在前，起主导作用，只有age相等，采用使用 nane进行排序*/</span>
<span class="token keyword">SELECT</span> name<span class="token punctuation">,</span>age <span class="token keyword">FROM</span> demo <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> age <span class="token keyword">ASC</span><span class="token punctuation">,</span> name <span class="token keyword">ASC</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>使用字段的位置排序,不推荐实际开发中使用，列顺序发生改变后，对应列数字 2 可能失效</li></ol><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">/*按照查询结果的第二列进行排序 第二列为age*/</span>
<span class="token keyword">SELECT</span> name<span class="token punctuation">,</span>age <span class="token keyword">FROM</span> demo <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token number">2</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>案例：找出年龄在 20 岁到 30 岁之间的员工信息，按照年龄进行降序排序</li></ol><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">/*第一种写法*/</span>
<span class="token keyword">SELECT</span> name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>email <span class="token keyword">FROM</span> demo <span class="token keyword">WHERE</span> age <span class="token operator">&gt;=</span> <span class="token number">20</span> <span class="token operator">and</span> age <span class="token operator">&lt;=</span> <span class="token number">30</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> age <span class="token keyword">DESC</span><span class="token punctuation">;</span>

<span class="token comment">/*第二种写法*/</span>
<span class="token keyword">SELECT</span> name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>email <span class="token keyword">FROM</span> demo <span class="token keyword">WHERE</span> age <span class="token operator">BETWEEN</span> <span class="token number">20</span> <span class="token operator">and</span> <span class="token number">30</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> age <span class="token keyword">DESC</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数据处理函数-单行处理函数" tabindex="-1"><a class="header-anchor" href="#数据处理函数-单行处理函数" aria-hidden="true">#</a> 数据处理函数/单行处理函数</h2><blockquote><p>单行处理函数的特点：一个输入对应一个输出，和单行处理函数相对应的是多行处理函数，多行处理函数多个输入，对应一个输出</p></blockquote><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>LOWER()</td><td>将字符串转换为小写</td></tr><tr><td>UPPER()</td><td>将字符串转换为大写</td></tr><tr><td>LEFT()</td><td>返回字符串左边的字符</td></tr><tr><td>LENGTH()</td><td>返回字符串的长度</td></tr><tr><td>TRIM()</td><td>去字符串前后空格</td></tr><tr><td>LTRIM()</td><td>去掉字符串左边的空格</td></tr><tr><td>RIGHT()</td><td>返回字符串右边的字符</td></tr><tr><td>RTRIM()</td><td>去掉字符串左边的空格</td></tr><tr><td>SUBSTR()</td><td>取子串（SUBSTR(被截取的字符串，起始下标(从 1 开始)，截取的长度)）</td></tr><tr><td>SUBSTRING()</td><td>提取字符串的组成部分</td></tr><tr><td>concat()</td><td>字符串拼接</td></tr><tr><td>SOUNDEX()</td><td>返回字符串的 SOUNDEX 值（听起来读音相似）</td></tr><tr><td>str_to_date()</td><td>将字符串转换成日期</td></tr><tr><td>date_format()</td><td>格式化日期</td></tr><tr><td>format()</td><td>设置千分位</td></tr><tr><td>round()</td><td>四舍五入</td></tr><tr><td>rand()</td><td>生成随机数</td></tr><tr><td>ifnull()</td><td>可以将 null 转换成一个具体值，在数据库中，只要有 null 参与的数学运算，最终结果就是 null,所以可以使用 ifnull() 进行计算</td></tr><tr><td>ABS()</td><td>返回绝对值</td></tr><tr><td>COS()</td><td>返回一个角度的余弦</td></tr><tr><td>EXP()</td><td>返回一个数的指数</td></tr><tr><td>PI()</td><td>返回圆周率 π 的值</td></tr><tr><td>SIN()</td><td>返回一个角度的正弦</td></tr><tr><td>SQRT()</td><td>返回一个数的平方根</td></tr><tr><td>TAN()</td><td>返回一个角度的正切</td></tr><tr><td>case...when..then..when...then...else..end</td><td>如果 xxx 满足则执行什么，如果 xxx 则执行什么，否则按照原来的</td></tr></tbody></table><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>
<span class="token comment">/*LOWER转换成小写*/</span>
<span class="token keyword">SELECT</span> id<span class="token punctuation">,</span>LOWER<span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">as</span> low_name <span class="token keyword">from</span> demo<span class="token punctuation">;</span>

<span class="token comment">/*UPPER转换成小写*/</span>
<span class="token keyword">SELECT</span> id<span class="token punctuation">,</span>UPPER<span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">as</span> upp_name <span class="token keyword">from</span> demo<span class="token punctuation">;</span>

<span class="token comment">/*TRIM去除前后空格*/</span>
<span class="token keyword">SELECT</span> id<span class="token punctuation">,</span>TRIM<span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">as</span> trim_name <span class="token keyword">from</span> demo<span class="token punctuation">;</span>

<span class="token comment">/*concat拼接字符串*/</span>
<span class="token keyword">select</span> id<span class="token punctuation">,</span>concat<span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span> <span class="token keyword">as</span> cont_name <span class="token keyword">from</span> demo<span class="token punctuation">;</span>

<span class="token comment">/*SUBSTR字符串截取*/</span>
<span class="token keyword">select</span> id<span class="token punctuation">,</span> SUBSTR<span class="token punctuation">(</span>name<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">as</span> substr_name <span class="token keyword">from</span> demo<span class="token punctuation">;</span>

<span class="token comment">/*round四舍五入:保留1位小数*/</span>
<span class="token keyword">select</span> <span class="token function">round</span><span class="token punctuation">(</span><span class="token number">1226.2568</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">as</span> result <span class="token keyword">from</span> demo<span class="token punctuation">;</span>

<span class="token comment">/*round四舍五入:保留2位小数*/</span>
<span class="token keyword">select</span> <span class="token function">round</span><span class="token punctuation">(</span><span class="token number">1226.2568</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">as</span> result <span class="token keyword">from</span> demo<span class="token punctuation">;</span>

<span class="token comment">/*round四舍五入:保留到10位*/</span>
<span class="token keyword">select</span> <span class="token function">round</span><span class="token punctuation">(</span><span class="token number">1226.2568</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">as</span> result <span class="token keyword">from</span> demo<span class="token punctuation">;</span>

<span class="token comment">/*rand生成100以内随机数*/</span>
<span class="token keyword">select</span> <span class="token function">round</span><span class="token punctuation">(</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">as</span> result <span class="token keyword">from</span> demo<span class="token punctuation">;</span>

<span class="token comment">/*ifnull可以将 null转成一个具体值,解决只要有null参与计算结果为null的问题*/</span>
<span class="token keyword">select</span> name<span class="token punctuation">,</span>ifnull<span class="token punctuation">(</span>age<span class="token punctuation">,</span>sex<span class="token punctuation">)</span> <span class="token keyword">as</span> age_sex <span class="token keyword">from</span> demo<span class="token punctuation">;</span>

<span class="token comment">/*case...when..then..when...then...else..end
当年龄为25工资上调10%,为26工资上调50%,只查询年龄为25或者26的
相当于 javaScript中的 if else
*/</span>
<span class="token keyword">select</span> name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>salary_money <span class="token keyword">from</span> demo<span class="token punctuation">;</span>

<span class="token keyword">select</span>
	name<span class="token punctuation">,</span>
	age<span class="token punctuation">,</span>
	salary_money<span class="token punctuation">,</span>
	<span class="token punctuation">(</span><span class="token keyword">case</span> age <span class="token keyword">when</span> <span class="token string">&#39;25&#39;</span> <span class="token keyword">then</span> salary_money<span class="token operator">*</span><span class="token number">1.1</span> <span class="token keyword">when</span> <span class="token string">&#39;26&#39;</span> <span class="token keyword">then</span> salary_money<span class="token operator">*</span><span class="token number">1.5</span> <span class="token keyword">else</span> salary_money <span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token keyword">as</span> new_money
<span class="token keyword">from</span>
	demo
<span class="token keyword">WHERE</span>
	age <span class="token operator">=</span> <span class="token number">26</span> <span class="token operator">or</span> age <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="分组函数-聚合函数-多行处理函数" tabindex="-1"><a class="header-anchor" href="#分组函数-聚合函数-多行处理函数" aria-hidden="true">#</a> 分组函数/聚合函数/多行处理函数</h3><blockquote><p>多行处理函数特点：输入多行，最终输出一行，可用统计</p></blockquote><p><strong>注意：</strong></p><ol><li>分组函数在使用的时候必须先进行分组，然后才能用</li><li>如果没有对数据进行分组，整张表默认为一组</li><li>分组函数自动东忽略 null，不需要提前对 null 进行处理</li><li>分组函数中 <code>count(*)</code> 和 <code>count(具体字段)</code></li></ol><p>多行处理函数一共有五个：count 计数、sum 求和、avg 平均值、max 最大值、min 最小值</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>
<span class="token comment">/*count计数，默认分组一张表一组*/</span>
<span class="token keyword">select</span> name<span class="token punctuation">,</span>age<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span>salary_money<span class="token punctuation">)</span> <span class="token keyword">from</span> demo<span class="token punctuation">;</span>

<span class="token comment">/*sum求和*/</span>
<span class="token keyword">select</span> name<span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span>salary_money<span class="token punctuation">)</span> <span class="token keyword">from</span> demo<span class="token punctuation">;</span>

<span class="token comment">/*avg平均值*/</span>
<span class="token keyword">select</span> name<span class="token punctuation">,</span><span class="token function">avg</span><span class="token punctuation">(</span>salary_money<span class="token punctuation">)</span> <span class="token keyword">as</span> avg_result <span class="token keyword">from</span> demo<span class="token punctuation">;</span>

<span class="token comment">/*max最大值*/</span>
<span class="token keyword">select</span> name<span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span>salary_money<span class="token punctuation">)</span> <span class="token keyword">as</span> max_money <span class="token keyword">from</span> demo<span class="token punctuation">;</span>

<span class="token comment">/*min最小值*/</span>
<span class="token keyword">select</span> name<span class="token punctuation">,</span><span class="token function">min</span><span class="token punctuation">(</span>salary_money<span class="token punctuation">)</span> <span class="token keyword">as</span> min_money <span class="token keyword">from</span> demo<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="分组查询" tabindex="-1"><a class="header-anchor" href="#分组查询" aria-hidden="true">#</a> 分组查询</h3><h4 id="什么是分组查询" tabindex="-1"><a class="header-anchor" href="#什么是分组查询" aria-hidden="true">#</a> 什么是分组查询？</h4><p>在实际应用中，可能有这样的需求，需要先进行分组，然后对每一组数据进行操作，这个时候我们需要使用分组查询 <strong>语法</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">FROM</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> GROUN <span class="token keyword">BY</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>应用场景</strong> 计算每个部门的工资和？ 计算每个工作岗位工资的平均薪资？ 找出每个工作岗位的最高薪资？</p><h4 id="之前的关键字全部组合-执行顺序如下" tabindex="-1"><a class="header-anchor" href="#之前的关键字全部组合-执行顺序如下" aria-hidden="true">#</a> 之前的关键字全部组合，执行顺序如下</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">FROM</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">WHERE</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> GROUN <span class="token keyword">BY</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行顺序如下：</p><ol><li>SELECT</li><li>FROM</li><li>WHERE</li><li>GROUN BY</li><li>ORDER BY</li></ol><h4 id="结论" tabindex="-1"><a class="header-anchor" href="#结论" aria-hidden="true">#</a> 结论</h4><p>在一条 select 语句中，如果有 group by 语句的话，select 后面只能跟：参加分组的字段，以及分组函数，其他一律不能跟</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">/*按照年龄进行分，然后对工资进行求和
先从 demo 表中查询数据，根据job字段进行分组，然后对每一组数据进行
sum(salary_money)
*/</span>
<span class="token keyword">SELECT</span> job<span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span>salary_money<span class="token punctuation">)</span> <span class="token keyword">as</span> total_money <span class="token keyword">FROM</span> demo <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> job<span class="token punctuation">;</span>

<span class="token comment">/*每个岗位最高信息*/</span>
<span class="token keyword">SELECT</span> job<span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span>salary_money<span class="token punctuation">)</span> <span class="token keyword">as</span> total_money <span class="token keyword">FROM</span> demo <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> job<span class="token punctuation">;</span>

<span class="token comment">/*使用HAVING 可以对芬湾族之后的数据进行进一步的过滤， HAVING不能单独使用，
HAVING不代替 WHERE ,HAVING 必须和GROUP BY一起使用
以下语句执行效率较低：
*/</span>
<span class="token keyword">SELECT</span> job<span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span>salary_money<span class="token punctuation">)</span> <span class="token keyword">as</span> total_money <span class="token keyword">FROM</span> demo <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> job <span class="token keyword">HAVING</span> <span class="token function">max</span><span class="token punctuation">(</span>salary_money<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">5500</span><span class="token punctuation">;</span>

<span class="token comment">/*有过滤条件的优先使用 WHERE 语句设置条件后，再进行分组
WHERE 和 HAVING youxian 优先使用 WHERE
*/</span>
<span class="token keyword">SELECT</span> job<span class="token punctuation">,</span>salary_money <span class="token keyword">FROM</span> demo <span class="token keyword">WHERE</span> salary_money <span class="token operator">&gt;</span> <span class="token number">3000</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> job<span class="token punctuation">;</span>

<span class="token comment">/*找出不同岗位的平均薪资，要求显示平均薪资高于6000的，
1. 找出每个岗位平均薪资
*/</span>
<span class="token keyword">SELECT</span> job<span class="token punctuation">,</span> <span class="token function">AVG</span><span class="token punctuation">(</span>salary_money<span class="token punctuation">)</span> <span class="token keyword">FROM</span> demo <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> job<span class="token punctuation">;</span>
<span class="token comment">/*2.找出不同岗位的平均薪资，要求显示平均薪资高于6000的 */</span>
<span class="token keyword">SELECT</span> job<span class="token punctuation">,</span><span class="token function">AVG</span><span class="token punctuation">(</span>salary_money<span class="token punctuation">)</span> <span class="token keyword">FROM</span> demo <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> job <span class="token keyword">HAVING</span> <span class="token function">AVG</span><span class="token punctuation">(</span>salary_money<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">6000</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="总结-单表查询" tabindex="-1"><a class="header-anchor" href="#总结-单表查询" aria-hidden="true">#</a> 总结（单表查询）</h3><ol><li>单表查询关键字执行顺序如下，不能颠倒 <code> select ... from ... where ... group by ... having ... order by</code></li><li>案例：找出每个岗位的平均薪资，要求平均薪资大于 5000 的，除了音频岗位之外，要求按照平均薪资降序排列</li></ol><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> job<span class="token punctuation">,</span><span class="token function">AVG</span><span class="token punctuation">(</span>salary_money<span class="token punctuation">)</span> <span class="token keyword">as</span> svg_money <span class="token keyword">FROM</span> demo <span class="token keyword">WHERE</span> job <span class="token operator">&lt;&gt;</span> <span class="token string">&#39;音频&#39;</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> job <span class="token keyword">HAVING</span> <span class="token function">AVG</span><span class="token punctuation">(</span>salary_money<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">5000</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> svg_money <span class="token keyword">DESC</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="去除重复数据" tabindex="-1"><a class="header-anchor" href="#去除重复数据" aria-hidden="true">#</a> 去除重复数据</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">/*查询结果去重，关键字DISTINCT*/</span>
<span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> job <span class="token keyword">FROM</span> demo<span class="token punctuation">;</span>

<span class="token comment">/* 查询结果去重，关键字DISTINCT 如果 DISTINCT 出现在两个字段之间，表示两个字段联合起来去重*/</span>
<span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> job<span class="token punctuation">,</span>sex <span class="token keyword">FROM</span> demo <span class="token keyword">WHERE</span> sex <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">null</span><span class="token punctuation">;</span>

<span class="token comment">/*统计工作岗位的数量*/</span>
<span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token keyword">DISTINCT</span> job<span class="token punctuation">)</span> <span class="token keyword">as</span> total_number <span class="token keyword">FROM</span> demo<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="连接查询-连表查询" tabindex="-1"><a class="header-anchor" href="#连接查询-连表查询" aria-hidden="true">#</a> 连接查询/连表查询</h3><p>连接查询：也可以叫跨表查询，需要关联多个表进行查询</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="子查询" tabindex="-1"><a class="header-anchor" href="#子查询" aria-hidden="true">#</a> 子查询</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="约束" tabindex="-1"><a class="header-anchor" href="#约束" aria-hidden="true">#</a> 约束</h2><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="索引" tabindex="-1"><a class="header-anchor" href="#索引" aria-hidden="true">#</a> 索引</h2><h2 id="事务" tabindex="-1"><a class="header-anchor" href="#事务" aria-hidden="true">#</a> 事务</h2><h2 id="锁机制" tabindex="-1"><a class="header-anchor" href="#锁机制" aria-hidden="true">#</a> 锁机制</h2><h2 id="设计数据库表" tabindex="-1"><a class="header-anchor" href="#设计数据库表" aria-hidden="true">#</a> 设计数据库表</h2><h2 id="性能优化" tabindex="-1"><a class="header-anchor" href="#性能优化" aria-hidden="true">#</a> 性能优化</h2><h2 id="数据库设计工具" tabindex="-1"><a class="header-anchor" href="#数据库设计工具" aria-hidden="true">#</a> 数据库设计工具</h2>`,77),m={href:"https://blog.csdn.net/weixin_41836784/article/details/118438666",target:"_blank",rel:"noopener noreferrer"},v={href:"https://gitee.com/robergroup/pdman",target:"_blank",rel:"noopener noreferrer"};function b(y,w){const a=c("ExternalLinkIcon");return o(),p("div",null,[i,n("ul",null,[n("li",null,[s("⭐MySql 教程："),n("a",r,[s("https://www.bilibili.com/video/BV1Vy4y1z7EX?spm_id_from=333.788.top_right_bar_window_custom_collection.content.click"),e(a)]),s(")")]),n("li",null,[s("尚硅谷 - MySQL 基础教程："),n("a",u,[s("https://www.bilibili.com/video/BV1xW411u7ax"),e(a)])])]),k,n("ul",null,[n("li",null,[s("PowerDesigner "),n("a",m,[s("https://blog.csdn.net/weixin_41836784/article/details/118438666"),e(a)])]),n("li",null,[s("pdman："),n("a",v,[s("https://gitee.com/robergroup/pdman"),e(a)])])])])}const E=t(d,[["render",b],["__file","sql语法.html.vue"]]);export{E as default};
