const e=JSON.parse('{"key":"v-7e6b7a9a","path":"/project/web%E7%A8%8B%E5%BA%8F%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.html","title":"web 性能优化","lang":"zh-CN","frontmatter":{"description":"web 性能优化 提示 HTML、javaScript、CSS、图片等静态资源本质上都从服务器上获取。可服务器响应客户端请求是需要时间的，返回的资源体积越大，耗时越长。所以想要快，有三方面考虑 减少资源体积大小 codeSplit 当打包构建应用时，JavaScript 包会变得非常大，影响页面加载。如果我们能把不同路由对应的组件分割成不同的代码块，然后当路由被访问的时候才加载对应组件，这样就更加高效。更详细的可以参考VueRouter官网的的配置。 vue 代码分割的实现(codesplit)，做了代码分割后，会将代码分离到不同的 bundle 中，然后进行按需加载这些文件，能够提高页面首次进入的速度，网站性能也能够得到提升 1、VueRouter 路由按需加载","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/project/web%E7%A8%8B%E5%BA%8F%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.html"}],["meta",{"property":"og:site_name","content":"我睡着的时候不困唉"}],["meta",{"property":"og:title","content":"web 性能优化"}],["meta",{"property":"og:description","content":"web 性能优化 提示 HTML、javaScript、CSS、图片等静态资源本质上都从服务器上获取。可服务器响应客户端请求是需要时间的，返回的资源体积越大，耗时越长。所以想要快，有三方面考虑 减少资源体积大小 codeSplit 当打包构建应用时，JavaScript 包会变得非常大，影响页面加载。如果我们能把不同路由对应的组件分割成不同的代码块，然后当路由被访问的时候才加载对应组件，这样就更加高效。更详细的可以参考VueRouter官网的的配置。 vue 代码分割的实现(codesplit)，做了代码分割后，会将代码分离到不同的 bundle 中，然后进行按需加载这些文件，能够提高页面首次进入的速度，网站性能也能够得到提升 1、VueRouter 路由按需加载"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"我睡着的时候不困唉"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"web 性能优化\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"我睡着的时候不困唉\\",\\"url\\":\\"https://zmmlet.github.io/zmmblog/\\"}]}"]]},"headers":[{"level":2,"title":"减少资源体积大小","slug":"减少资源体积大小","link":"#减少资源体积大小","children":[{"level":3,"title":"codeSplit","slug":"codesplit","link":"#codesplit","children":[]},{"level":3,"title":"Tree Shaking","slug":"tree-shaking","link":"#tree-shaking","children":[]},{"level":3,"title":"优化 webpack 打包","slug":"优化-webpack-打包","link":"#优化-webpack-打包","children":[]},{"level":3,"title":"CDN 加载资源","slug":"cdn-加载资源","link":"#cdn-加载资源","children":[]},{"level":3,"title":"PurgeCSS","slug":"purgecss","link":"#purgecss","children":[]}]},{"level":2,"title":"加载资源的优先级","slug":"加载资源的优先级","link":"#加载资源的优先级","children":[]},{"level":2,"title":"缓存","slug":"缓存","link":"#缓存","children":[]},{"level":2,"title":"加载方式","slug":"加载方式","link":"#加载方式","children":[]},{"level":2,"title":"预加载","slug":"预加载","link":"#预加载","children":[]},{"level":2,"title":"缓存加载","slug":"缓存加载","link":"#缓存加载","children":[]},{"level":2,"title":"离线包","slug":"离线包","link":"#离线包","children":[]},{"level":2,"title":"webview 优化","slug":"webview-优化","link":"#webview-优化","children":[{"level":3,"title":"优化请求数量","slug":"优化请求数量","link":"#优化请求数量","children":[]}]},{"level":2,"title":"打包开启 gzip 压缩","slug":"打包开启-gzip-压缩","link":"#打包开启-gzip-压缩","children":[{"level":3,"title":"安装依赖文件","slug":"安装依赖文件","link":"#安装依赖文件","children":[]},{"level":3,"title":"vue.config.js 设置 gzip","slug":"vue-config-js-设置-gzip","link":"#vue-config-js-设置-gzip","children":[]},{"level":3,"title":"nginx 开启 gzip","slug":"nginx-开启-gzip","link":"#nginx-开启-gzip","children":[]}]},{"level":2,"title":"javaScript 小技巧","slug":"javascript-小技巧","link":"#javascript-小技巧","children":[{"level":3,"title":"使用文档碎片减少 DOM 操作","slug":"使用文档碎片减少-dom-操作","link":"#使用文档碎片减少-dom-操作","children":[]},{"level":3,"title":"获取 URL 参数并转换为对象","slug":"获取-url-参数并转换为对象","link":"#获取-url-参数并转换为对象","children":[]},{"level":3,"title":"使用 Promise 加载图片","slug":"使用-promise-加载图片","link":"#使用-promise-加载图片","children":[]}]}],"git":{},"readingTime":{"minutes":9.36,"words":2808},"filePathRelative":"project/web程序性能优化.md","excerpt":"<h1> web 性能优化</h1>\\n<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">提示</p>\\n<p>HTML、javaScript、CSS、图片等静态资源本质上都从服务器上获取。可服务器响应客户端请求是需要时间的，返回的资源体积越大，耗时越长。所以想要快，有三方面考虑</p>\\n</div>\\n<h2> 减少资源体积大小</h2>\\n<h3> codeSplit</h3>\\n<p>当打包构建应用时，JavaScript 包会变得非常大，影响页面加载。如果我们能把不同路由对应的组件分割成不同的代码块，然后当路由被访问的时候才加载对应组件，这样就更加高效。更详细的可以参考<a href=\\"https://router.vuejs.org/zh/guide/advanced/lazy-loading.html#%E8%B7%AF%E7%94%B1%E6%87%92%E5%8A%A0%E8%BD%BD\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">VueRouter</a>官网的的配置。\\nvue 代码分割的实现(codesplit)，做了代码分割后，会将代码分离到不同的 bundle 中，然后进行按需加载这些文件，能够提高页面首次进入的速度，网站性能也能够得到提升\\n<strong>1、VueRouter 路由按需加载</strong></p>","autoDesc":true}');export{e as data};
